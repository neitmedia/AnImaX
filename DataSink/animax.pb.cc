// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animax.proto

#include "animax.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace animax {
constexpr Measurement::Measurement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : energies_()
  , _energies_cached_byte_size_(0)
  , scantype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , save_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , save_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , datasinkip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sddip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ccdip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roidefinitions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_note_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0)
  , acquisition_time_(0)
  , energy_count_(0)
  , datasinkport_(0)
  , sddport_(0)
  , ccdport_(0)
  , sebitcount_(0)
  , filter_(0)
  , energyrange_(0)
  , tempmode_(0)
  , zeropeakperiod_(0)
  , acquisitionmode_(0)
  , checktemperature_(0)
  , sdd1_(false)
  , sdd2_(false)
  , sdd3_(false)
  , sdd4_(false)
  , ccdheight_(0)
  , ccdwidth_(0)
  , sample_width_(0)
  , sample_height_(0)
  , sample_rotation_angle_(0){}
struct MeasurementDefaultTypeInternal {
  constexpr MeasurementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeasurementDefaultTypeInternal() {}
  union {
    Measurement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeasurementDefaultTypeInternal _Measurement_default_instance_;
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acquisition_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , acquisition_number_(0)
  , set_energy_(0)
  , beamline_energy_(0)
  , ringcurrent_(0)
  , horizontal_shutter_(false)
  , vertical_shutter_(false){}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
constexpr sdd::sdd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pixeldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct sddDefaultTypeInternal {
  constexpr sddDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sddDefaultTypeInternal() {}
  union {
    sdd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sddDefaultTypeInternal _sdd_default_instance_;
constexpr ccd::ccd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pixeldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cnt_(0){}
struct ccdDefaultTypeInternal {
  constexpr ccdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ccdDefaultTypeInternal() {}
  union {
    ccd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ccdDefaultTypeInternal _ccd_default_instance_;
constexpr ccdsettings::ccdsettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0){}
struct ccdsettingsDefaultTypeInternal {
  constexpr ccdsettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ccdsettingsDefaultTypeInternal() {}
  union {
    ccdsettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ccdsettingsDefaultTypeInternal _ccdsettings_default_instance_;
constexpr preview::preview(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previewdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct previewDefaultTypeInternal {
  constexpr previewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~previewDefaultTypeInternal() {}
  union {
    preview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT previewDefaultTypeInternal _preview_default_instance_;
constexpr ROI::ROI(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roidata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ROIDefaultTypeInternal {
  constexpr ROIDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ROIDefaultTypeInternal() {}
  union {
    ROI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ROIDefaultTypeInternal _ROI_default_instance_;
constexpr scanstatus::scanstatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct scanstatusDefaultTypeInternal {
  constexpr scanstatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~scanstatusDefaultTypeInternal() {}
  union {
    scanstatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT scanstatusDefaultTypeInternal _scanstatus_default_instance_;
}  // namespace animax
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_animax_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_animax_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_animax_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_animax_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, width_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, height_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, acquisition_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, scantype_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, save_path_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, save_file_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, energy_count_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, energies_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, roidefinitions_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, datasinkip_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, datasinkport_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sddip_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sddport_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, ccdip_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, ccdport_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sebitcount_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, filter_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, energyrange_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, tempmode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, zeropeakperiod_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, acquisitionmode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, checktemperature_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sdd1_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sdd2_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sdd3_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sdd4_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, ccdheight_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, ccdwidth_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_name_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_type_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_note_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_width_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_height_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_rotation_angle_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, notes_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, userdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, acquisition_number_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, acquisition_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, set_energy_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, beamline_energy_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, ringcurrent_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, horizontal_shutter_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, vertical_shutter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::sdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::sdd, pixeldata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::ccd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::ccd, cnt_),
  PROTOBUF_FIELD_OFFSET(::animax::ccd, pixeldata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, width_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::preview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::preview, type_),
  PROTOBUF_FIELD_OFFSET(::animax::preview, previewdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::ROI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::ROI, element_),
  PROTOBUF_FIELD_OFFSET(::animax::ROI, line_),
  PROTOBUF_FIELD_OFFSET(::animax::ROI, roidata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::scanstatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::scanstatus, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::animax::Measurement)},
  { 41, -1, sizeof(::animax::Metadata)},
  { 53, -1, sizeof(::animax::sdd)},
  { 59, -1, sizeof(::animax::ccd)},
  { 66, -1, sizeof(::animax::ccdsettings)},
  { 73, -1, sizeof(::animax::preview)},
  { 80, -1, sizeof(::animax::ROI)},
  { 88, -1, sizeof(::animax::scanstatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_Measurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_sdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_ccd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_ccdsettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_preview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_ROI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_scanstatus_default_instance_),
};

const char descriptor_table_protodef_animax_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014animax.proto\022\006animax\"\307\005\n\013Measurement\022\r"
  "\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\030\n\020acquisi"
  "tion_time\030\003 \001(\005\022\020\n\010scantype\030\004 \001(\t\022\021\n\tsav"
  "e_path\030\005 \001(\t\022\021\n\tsave_file\030\006 \001(\t\022\024\n\014energ"
  "y_count\030\007 \001(\005\022\020\n\010energies\030\010 \003(\005\022\026\n\016ROIde"
  "finitions\030\017 \001(\t\022\022\n\ndatasinkIP\030\t \001(\t\022\024\n\014d"
  "atasinkPort\030\n \001(\005\022\r\n\005sddIP\030\013 \001(\t\022\017\n\007sddP"
  "ort\030\014 \001(\005\022\r\n\005ccdIP\030\r \001(\t\022\017\n\007ccdPort\030\016 \001("
  "\005\022\022\n\nsebitcount\030\020 \001(\005\022\016\n\006filter\030\021 \001(\005\022\023\n"
  "\013energyrange\030\022 \001(\005\022\020\n\010tempmode\030\023 \001(\005\022\026\n\016"
  "zeropeakperiod\030\024 \001(\005\022\027\n\017acquisitionmode\030"
  "\025 \001(\005\022\030\n\020checktemperature\030\026 \001(\005\022\014\n\004sdd1\030"
  "\027 \001(\010\022\014\n\004sdd2\030\030 \001(\010\022\014\n\004sdd3\030\031 \001(\010\022\014\n\004sdd"
  "4\030\032 \001(\010\022\021\n\tccdheight\030\033 \001(\005\022\020\n\010ccdwidth\030\034"
  " \001(\005\022\023\n\013sample_name\030\035 \001(\t\022\023\n\013sample_type"
  "\030\036 \001(\t\022\023\n\013sample_note\030\037 \001(\t\022\024\n\014sample_wi"
  "dth\030  \001(\002\022\025\n\rsample_height\030! \001(\002\022\035\n\025samp"
  "le_rotation_angle\030\" \001(\002\022\r\n\005notes\030# \001(\t\022\020"
  "\n\010userdata\030$ \001(\t\"\270\001\n\010Metadata\022\032\n\022acquisi"
  "tion_number\030\001 \001(\005\022\030\n\020acquisition_time\030\002 "
  "\001(\t\022\022\n\nset_energy\030\003 \001(\002\022\027\n\017beamline_ener"
  "gy\030\004 \001(\002\022\023\n\013ringcurrent\030\005 \001(\002\022\032\n\022horizon"
  "tal_shutter\030\006 \001(\010\022\030\n\020vertical_shutter\030\007 "
  "\001(\010\"\030\n\003sdd\022\021\n\tpixeldata\030\001 \001(\014\"%\n\003ccd\022\013\n\003"
  "cnt\030\001 \001(\005\022\021\n\tpixeldata\030\002 \001(\014\",\n\013ccdsetti"
  "ngs\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\",\n\007pr"
  "eview\022\014\n\004type\030\001 \001(\t\022\023\n\013previewdata\030\002 \001(\014"
  "\"5\n\003ROI\022\017\n\007element\030\001 \001(\t\022\014\n\004line\030\002 \001(\t\022\017"
  "\n\007roidata\030\003 \001(\014\"\034\n\nscanstatus\022\016\n\006status\030"
  "\001 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_animax_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_animax_2eproto = {
  false, false, 1173, descriptor_table_protodef_animax_2eproto, "animax.proto", 
  &descriptor_table_animax_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_animax_2eproto::offsets,
  file_level_metadata_animax_2eproto, file_level_enum_descriptors_animax_2eproto, file_level_service_descriptors_animax_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_animax_2eproto_getter() {
  return &descriptor_table_animax_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_animax_2eproto(&descriptor_table_animax_2eproto);
namespace animax {

// ===================================================================

class Measurement::_Internal {
 public:
};

Measurement::Measurement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  energies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      energies_(from.energies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scantype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scantype().empty()) {
    scantype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scantype(), 
      GetArenaForAllocation());
  }
  save_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_save_path().empty()) {
    save_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_save_path(), 
      GetArenaForAllocation());
  }
  save_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_save_file().empty()) {
    save_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_save_file(), 
      GetArenaForAllocation());
  }
  datasinkip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datasinkip().empty()) {
    datasinkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_datasinkip(), 
      GetArenaForAllocation());
  }
  sddip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sddip().empty()) {
    sddip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sddip(), 
      GetArenaForAllocation());
  }
  ccdip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccdip().empty()) {
    ccdip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccdip(), 
      GetArenaForAllocation());
  }
  roidefinitions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roidefinitions().empty()) {
    roidefinitions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roidefinitions(), 
      GetArenaForAllocation());
  }
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample_name().empty()) {
    sample_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sample_name(), 
      GetArenaForAllocation());
  }
  sample_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample_type().empty()) {
    sample_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sample_type(), 
      GetArenaForAllocation());
  }
  sample_note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample_note().empty()) {
    sample_note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sample_note(), 
      GetArenaForAllocation());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notes(), 
      GetArenaForAllocation());
  }
  userdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userdata().empty()) {
    userdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userdata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rotation_angle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sample_rotation_angle_));
  // @@protoc_insertion_point(copy_constructor:animax.Measurement)
}

inline void Measurement::SharedCtor() {
scantype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
save_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
save_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
datasinkip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sddip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ccdip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
roidefinitions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sample_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sample_note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_rotation_angle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sample_rotation_angle_));
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:animax.Measurement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Measurement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  scantype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datasinkip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sddip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ccdip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roidefinitions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Measurement::ArenaDtor(void* object) {
  Measurement* _this = reinterpret_cast< Measurement* >(object);
  (void)_this;
}
void Measurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Measurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  energies_.Clear();
  scantype_.ClearToEmpty();
  save_path_.ClearToEmpty();
  save_file_.ClearToEmpty();
  datasinkip_.ClearToEmpty();
  sddip_.ClearToEmpty();
  ccdip_.ClearToEmpty();
  roidefinitions_.ClearToEmpty();
  sample_name_.ClearToEmpty();
  sample_type_.ClearToEmpty();
  sample_note_.ClearToEmpty();
  notes_.ClearToEmpty();
  userdata_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rotation_angle_) -
      reinterpret_cast<char*>(&width_)) + sizeof(sample_rotation_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Measurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 acquisition_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          acquisition_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scantype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scantype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.scantype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string save_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_save_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.save_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string save_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_save_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.save_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 energy_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          energy_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 energies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_energies(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_energies(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string datasinkIP = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_datasinkip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.datasinkIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 datasinkPort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          datasinkport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sddIP = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sddip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.sddIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sddPort = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sddport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccdIP = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_ccdip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.ccdIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ccdPort = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ccdport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ROIdefinitions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_roidefinitions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.ROIdefinitions"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sebitcount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          sebitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 filter = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 energyrange = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          energyrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tempmode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          tempmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zeropeakperiod = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          zeropeakperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 acquisitionmode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          acquisitionmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 checktemperature = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          checktemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sdd1 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          sdd1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sdd2 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          sdd2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sdd3 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          sdd3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sdd4 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          sdd4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ccdheight = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ccdheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ccdwidth = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ccdwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_name = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_sample_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.sample_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_sample_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.sample_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_note = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_sample_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.sample_note"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sample_width = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          sample_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sample_height = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          sample_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sample_rotation_angle = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sample_rotation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string notes = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userdata = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_userdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.userdata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Measurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 acquisition_time = 3;
  if (this->_internal_acquisition_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_acquisition_time(), target);
  }

  // string scantype = 4;
  if (!this->_internal_scantype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scantype().data(), static_cast<int>(this->_internal_scantype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.scantype");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scantype(), target);
  }

  // string save_path = 5;
  if (!this->_internal_save_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_save_path().data(), static_cast<int>(this->_internal_save_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.save_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_save_path(), target);
  }

  // string save_file = 6;
  if (!this->_internal_save_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_save_file().data(), static_cast<int>(this->_internal_save_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.save_file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_save_file(), target);
  }

  // int32 energy_count = 7;
  if (this->_internal_energy_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_energy_count(), target);
  }

  // repeated int32 energies = 8;
  {
    int byte_size = _energies_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_energies(), byte_size, target);
    }
  }

  // string datasinkIP = 9;
  if (!this->_internal_datasinkip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datasinkip().data(), static_cast<int>(this->_internal_datasinkip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.datasinkIP");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_datasinkip(), target);
  }

  // int32 datasinkPort = 10;
  if (this->_internal_datasinkport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_datasinkport(), target);
  }

  // string sddIP = 11;
  if (!this->_internal_sddip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sddip().data(), static_cast<int>(this->_internal_sddip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.sddIP");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sddip(), target);
  }

  // int32 sddPort = 12;
  if (this->_internal_sddport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sddport(), target);
  }

  // string ccdIP = 13;
  if (!this->_internal_ccdip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccdip().data(), static_cast<int>(this->_internal_ccdip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.ccdIP");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_ccdip(), target);
  }

  // int32 ccdPort = 14;
  if (this->_internal_ccdport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_ccdport(), target);
  }

  // string ROIdefinitions = 15;
  if (!this->_internal_roidefinitions().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roidefinitions().data(), static_cast<int>(this->_internal_roidefinitions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.ROIdefinitions");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_roidefinitions(), target);
  }

  // int32 sebitcount = 16;
  if (this->_internal_sebitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_sebitcount(), target);
  }

  // int32 filter = 17;
  if (this->_internal_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_filter(), target);
  }

  // int32 energyrange = 18;
  if (this->_internal_energyrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_energyrange(), target);
  }

  // int32 tempmode = 19;
  if (this->_internal_tempmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_tempmode(), target);
  }

  // int32 zeropeakperiod = 20;
  if (this->_internal_zeropeakperiod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_zeropeakperiod(), target);
  }

  // int32 acquisitionmode = 21;
  if (this->_internal_acquisitionmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_acquisitionmode(), target);
  }

  // int32 checktemperature = 22;
  if (this->_internal_checktemperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_checktemperature(), target);
  }

  // bool sdd1 = 23;
  if (this->_internal_sdd1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_sdd1(), target);
  }

  // bool sdd2 = 24;
  if (this->_internal_sdd2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_sdd2(), target);
  }

  // bool sdd3 = 25;
  if (this->_internal_sdd3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_sdd3(), target);
  }

  // bool sdd4 = 26;
  if (this->_internal_sdd4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_sdd4(), target);
  }

  // int32 ccdheight = 27;
  if (this->_internal_ccdheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_ccdheight(), target);
  }

  // int32 ccdwidth = 28;
  if (this->_internal_ccdwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_ccdwidth(), target);
  }

  // string sample_name = 29;
  if (!this->_internal_sample_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sample_name().data(), static_cast<int>(this->_internal_sample_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.sample_name");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_sample_name(), target);
  }

  // string sample_type = 30;
  if (!this->_internal_sample_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sample_type().data(), static_cast<int>(this->_internal_sample_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.sample_type");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_sample_type(), target);
  }

  // string sample_note = 31;
  if (!this->_internal_sample_note().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sample_note().data(), static_cast<int>(this->_internal_sample_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.sample_note");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_sample_note(), target);
  }

  // float sample_width = 32;
  if (!(this->_internal_sample_width() <= 0 && this->_internal_sample_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_sample_width(), target);
  }

  // float sample_height = 33;
  if (!(this->_internal_sample_height() <= 0 && this->_internal_sample_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_sample_height(), target);
  }

  // float sample_rotation_angle = 34;
  if (!(this->_internal_sample_rotation_angle() <= 0 && this->_internal_sample_rotation_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_sample_rotation_angle(), target);
  }

  // string notes = 35;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.notes");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_notes(), target);
  }

  // string userdata = 36;
  if (!this->_internal_userdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userdata().data(), static_cast<int>(this->_internal_userdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.userdata");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_userdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.Measurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 energies = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->energies_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _energies_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string scantype = 4;
  if (!this->_internal_scantype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scantype());
  }

  // string save_path = 5;
  if (!this->_internal_save_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_save_path());
  }

  // string save_file = 6;
  if (!this->_internal_save_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_save_file());
  }

  // string datasinkIP = 9;
  if (!this->_internal_datasinkip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datasinkip());
  }

  // string sddIP = 11;
  if (!this->_internal_sddip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sddip());
  }

  // string ccdIP = 13;
  if (!this->_internal_ccdip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccdip());
  }

  // string ROIdefinitions = 15;
  if (!this->_internal_roidefinitions().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roidefinitions());
  }

  // string sample_name = 29;
  if (!this->_internal_sample_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sample_name());
  }

  // string sample_type = 30;
  if (!this->_internal_sample_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sample_type());
  }

  // string sample_note = 31;
  if (!this->_internal_sample_note().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sample_note());
  }

  // string notes = 35;
  if (!this->_internal_notes().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // string userdata = 36;
  if (!this->_internal_userdata().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userdata());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 acquisition_time = 3;
  if (this->_internal_acquisition_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acquisition_time());
  }

  // int32 energy_count = 7;
  if (this->_internal_energy_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_energy_count());
  }

  // int32 datasinkPort = 10;
  if (this->_internal_datasinkport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_datasinkport());
  }

  // int32 sddPort = 12;
  if (this->_internal_sddport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sddport());
  }

  // int32 ccdPort = 14;
  if (this->_internal_ccdport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ccdport());
  }

  // int32 sebitcount = 16;
  if (this->_internal_sebitcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sebitcount());
  }

  // int32 filter = 17;
  if (this->_internal_filter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filter());
  }

  // int32 energyrange = 18;
  if (this->_internal_energyrange() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_energyrange());
  }

  // int32 tempmode = 19;
  if (this->_internal_tempmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tempmode());
  }

  // int32 zeropeakperiod = 20;
  if (this->_internal_zeropeakperiod() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zeropeakperiod());
  }

  // int32 acquisitionmode = 21;
  if (this->_internal_acquisitionmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acquisitionmode());
  }

  // int32 checktemperature = 22;
  if (this->_internal_checktemperature() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checktemperature());
  }

  // bool sdd1 = 23;
  if (this->_internal_sdd1() != 0) {
    total_size += 2 + 1;
  }

  // bool sdd2 = 24;
  if (this->_internal_sdd2() != 0) {
    total_size += 2 + 1;
  }

  // bool sdd3 = 25;
  if (this->_internal_sdd3() != 0) {
    total_size += 2 + 1;
  }

  // bool sdd4 = 26;
  if (this->_internal_sdd4() != 0) {
    total_size += 2 + 1;
  }

  // int32 ccdheight = 27;
  if (this->_internal_ccdheight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ccdheight());
  }

  // int32 ccdwidth = 28;
  if (this->_internal_ccdwidth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ccdwidth());
  }

  // float sample_width = 32;
  if (!(this->_internal_sample_width() <= 0 && this->_internal_sample_width() >= 0)) {
    total_size += 2 + 4;
  }

  // float sample_height = 33;
  if (!(this->_internal_sample_height() <= 0 && this->_internal_sample_height() >= 0)) {
    total_size += 2 + 4;
  }

  // float sample_rotation_angle = 34;
  if (!(this->_internal_sample_rotation_angle() <= 0 && this->_internal_sample_rotation_angle() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Measurement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Measurement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Measurement::GetClassData() const { return &_class_data_; }

void Measurement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Measurement *>(to)->MergeFrom(
      static_cast<const Measurement &>(from));
}


void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  energies_.MergeFrom(from.energies_);
  if (!from._internal_scantype().empty()) {
    _internal_set_scantype(from._internal_scantype());
  }
  if (!from._internal_save_path().empty()) {
    _internal_set_save_path(from._internal_save_path());
  }
  if (!from._internal_save_file().empty()) {
    _internal_set_save_file(from._internal_save_file());
  }
  if (!from._internal_datasinkip().empty()) {
    _internal_set_datasinkip(from._internal_datasinkip());
  }
  if (!from._internal_sddip().empty()) {
    _internal_set_sddip(from._internal_sddip());
  }
  if (!from._internal_ccdip().empty()) {
    _internal_set_ccdip(from._internal_ccdip());
  }
  if (!from._internal_roidefinitions().empty()) {
    _internal_set_roidefinitions(from._internal_roidefinitions());
  }
  if (!from._internal_sample_name().empty()) {
    _internal_set_sample_name(from._internal_sample_name());
  }
  if (!from._internal_sample_type().empty()) {
    _internal_set_sample_type(from._internal_sample_type());
  }
  if (!from._internal_sample_note().empty()) {
    _internal_set_sample_note(from._internal_sample_note());
  }
  if (!from._internal_notes().empty()) {
    _internal_set_notes(from._internal_notes());
  }
  if (!from._internal_userdata().empty()) {
    _internal_set_userdata(from._internal_userdata());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_acquisition_time() != 0) {
    _internal_set_acquisition_time(from._internal_acquisition_time());
  }
  if (from._internal_energy_count() != 0) {
    _internal_set_energy_count(from._internal_energy_count());
  }
  if (from._internal_datasinkport() != 0) {
    _internal_set_datasinkport(from._internal_datasinkport());
  }
  if (from._internal_sddport() != 0) {
    _internal_set_sddport(from._internal_sddport());
  }
  if (from._internal_ccdport() != 0) {
    _internal_set_ccdport(from._internal_ccdport());
  }
  if (from._internal_sebitcount() != 0) {
    _internal_set_sebitcount(from._internal_sebitcount());
  }
  if (from._internal_filter() != 0) {
    _internal_set_filter(from._internal_filter());
  }
  if (from._internal_energyrange() != 0) {
    _internal_set_energyrange(from._internal_energyrange());
  }
  if (from._internal_tempmode() != 0) {
    _internal_set_tempmode(from._internal_tempmode());
  }
  if (from._internal_zeropeakperiod() != 0) {
    _internal_set_zeropeakperiod(from._internal_zeropeakperiod());
  }
  if (from._internal_acquisitionmode() != 0) {
    _internal_set_acquisitionmode(from._internal_acquisitionmode());
  }
  if (from._internal_checktemperature() != 0) {
    _internal_set_checktemperature(from._internal_checktemperature());
  }
  if (from._internal_sdd1() != 0) {
    _internal_set_sdd1(from._internal_sdd1());
  }
  if (from._internal_sdd2() != 0) {
    _internal_set_sdd2(from._internal_sdd2());
  }
  if (from._internal_sdd3() != 0) {
    _internal_set_sdd3(from._internal_sdd3());
  }
  if (from._internal_sdd4() != 0) {
    _internal_set_sdd4(from._internal_sdd4());
  }
  if (from._internal_ccdheight() != 0) {
    _internal_set_ccdheight(from._internal_ccdheight());
  }
  if (from._internal_ccdwidth() != 0) {
    _internal_set_ccdwidth(from._internal_ccdwidth());
  }
  if (!(from._internal_sample_width() <= 0 && from._internal_sample_width() >= 0)) {
    _internal_set_sample_width(from._internal_sample_width());
  }
  if (!(from._internal_sample_height() <= 0 && from._internal_sample_height() >= 0)) {
    _internal_set_sample_height(from._internal_sample_height());
  }
  if (!(from._internal_sample_rotation_angle() <= 0 && from._internal_sample_rotation_angle() >= 0)) {
    _internal_set_sample_rotation_angle(from._internal_sample_rotation_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::InternalSwap(Measurement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  energies_.InternalSwap(&other->energies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scantype_, GetArenaForAllocation(),
      &other->scantype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &save_path_, GetArenaForAllocation(),
      &other->save_path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &save_file_, GetArenaForAllocation(),
      &other->save_file_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &datasinkip_, GetArenaForAllocation(),
      &other->datasinkip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sddip_, GetArenaForAllocation(),
      &other->sddip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccdip_, GetArenaForAllocation(),
      &other->ccdip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roidefinitions_, GetArenaForAllocation(),
      &other->roidefinitions_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sample_name_, GetArenaForAllocation(),
      &other->sample_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sample_type_, GetArenaForAllocation(),
      &other->sample_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sample_note_, GetArenaForAllocation(),
      &other->sample_note_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notes_, GetArenaForAllocation(),
      &other->notes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userdata_, GetArenaForAllocation(),
      &other->userdata_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Measurement, sample_rotation_angle_)
      + sizeof(Measurement::sample_rotation_angle_)
      - PROTOBUF_FIELD_OFFSET(Measurement, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Measurement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[0]);
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acquisition_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acquisition_time().empty()) {
    acquisition_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_acquisition_time(), 
      GetArenaForAllocation());
  }
  ::memcpy(&acquisition_number_, &from.acquisition_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_shutter_) -
    reinterpret_cast<char*>(&acquisition_number_)) + sizeof(vertical_shutter_));
  // @@protoc_insertion_point(copy_constructor:animax.Metadata)
}

inline void Metadata::SharedCtor() {
acquisition_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acquisition_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vertical_shutter_) -
    reinterpret_cast<char*>(&acquisition_number_)) + sizeof(vertical_shutter_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:animax.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  acquisition_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
}
void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acquisition_time_.ClearToEmpty();
  ::memset(&acquisition_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_shutter_) -
      reinterpret_cast<char*>(&acquisition_number_)) + sizeof(vertical_shutter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 acquisition_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          acquisition_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string acquisition_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_acquisition_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Metadata.acquisition_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float set_energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          set_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beamline_energy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          beamline_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ringcurrent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ringcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool horizontal_shutter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          horizontal_shutter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vertical_shutter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vertical_shutter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 acquisition_number = 1;
  if (this->_internal_acquisition_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_acquisition_number(), target);
  }

  // string acquisition_time = 2;
  if (!this->_internal_acquisition_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acquisition_time().data(), static_cast<int>(this->_internal_acquisition_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Metadata.acquisition_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_acquisition_time(), target);
  }

  // float set_energy = 3;
  if (!(this->_internal_set_energy() <= 0 && this->_internal_set_energy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_set_energy(), target);
  }

  // float beamline_energy = 4;
  if (!(this->_internal_beamline_energy() <= 0 && this->_internal_beamline_energy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_beamline_energy(), target);
  }

  // float ringcurrent = 5;
  if (!(this->_internal_ringcurrent() <= 0 && this->_internal_ringcurrent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ringcurrent(), target);
  }

  // bool horizontal_shutter = 6;
  if (this->_internal_horizontal_shutter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_horizontal_shutter(), target);
  }

  // bool vertical_shutter = 7;
  if (this->_internal_vertical_shutter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_vertical_shutter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string acquisition_time = 2;
  if (!this->_internal_acquisition_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acquisition_time());
  }

  // int32 acquisition_number = 1;
  if (this->_internal_acquisition_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acquisition_number());
  }

  // float set_energy = 3;
  if (!(this->_internal_set_energy() <= 0 && this->_internal_set_energy() >= 0)) {
    total_size += 1 + 4;
  }

  // float beamline_energy = 4;
  if (!(this->_internal_beamline_energy() <= 0 && this->_internal_beamline_energy() >= 0)) {
    total_size += 1 + 4;
  }

  // float ringcurrent = 5;
  if (!(this->_internal_ringcurrent() <= 0 && this->_internal_ringcurrent() >= 0)) {
    total_size += 1 + 4;
  }

  // bool horizontal_shutter = 6;
  if (this->_internal_horizontal_shutter() != 0) {
    total_size += 1 + 1;
  }

  // bool vertical_shutter = 7;
  if (this->_internal_vertical_shutter() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }

void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Metadata *>(to)->MergeFrom(
      static_cast<const Metadata &>(from));
}


void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_acquisition_time().empty()) {
    _internal_set_acquisition_time(from._internal_acquisition_time());
  }
  if (from._internal_acquisition_number() != 0) {
    _internal_set_acquisition_number(from._internal_acquisition_number());
  }
  if (!(from._internal_set_energy() <= 0 && from._internal_set_energy() >= 0)) {
    _internal_set_set_energy(from._internal_set_energy());
  }
  if (!(from._internal_beamline_energy() <= 0 && from._internal_beamline_energy() >= 0)) {
    _internal_set_beamline_energy(from._internal_beamline_energy());
  }
  if (!(from._internal_ringcurrent() <= 0 && from._internal_ringcurrent() >= 0)) {
    _internal_set_ringcurrent(from._internal_ringcurrent());
  }
  if (from._internal_horizontal_shutter() != 0) {
    _internal_set_horizontal_shutter(from._internal_horizontal_shutter());
  }
  if (from._internal_vertical_shutter() != 0) {
    _internal_set_vertical_shutter(from._internal_vertical_shutter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &acquisition_time_, GetArenaForAllocation(),
      &other->acquisition_time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata, vertical_shutter_)
      + sizeof(Metadata::vertical_shutter_)
      - PROTOBUF_FIELD_OFFSET(Metadata, acquisition_number_)>(
          reinterpret_cast<char*>(&acquisition_number_),
          reinterpret_cast<char*>(&other->acquisition_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[1]);
}

// ===================================================================

class sdd::_Internal {
 public:
};

sdd::sdd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.sdd)
}
sdd::sdd(const sdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pixeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pixeldata().empty()) {
    pixeldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pixeldata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.sdd)
}

inline void sdd::SharedCtor() {
pixeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

sdd::~sdd() {
  // @@protoc_insertion_point(destructor:animax.sdd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void sdd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pixeldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sdd::ArenaDtor(void* object) {
  sdd* _this = reinterpret_cast< sdd* >(object);
  (void)_this;
}
void sdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sdd::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.sdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pixeldata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pixeldata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pixeldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.sdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pixeldata = 1;
  if (!this->_internal_pixeldata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pixeldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.sdd)
  return target;
}

size_t sdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.sdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pixeldata = 1;
  if (!this->_internal_pixeldata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pixeldata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sdd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    sdd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sdd::GetClassData() const { return &_class_data_; }

void sdd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<sdd *>(to)->MergeFrom(
      static_cast<const sdd &>(from));
}


void sdd::MergeFrom(const sdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.sdd)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pixeldata().empty()) {
    _internal_set_pixeldata(from._internal_pixeldata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sdd::CopyFrom(const sdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.sdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sdd::IsInitialized() const {
  return true;
}

void sdd::InternalSwap(sdd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pixeldata_, GetArenaForAllocation(),
      &other->pixeldata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata sdd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[2]);
}

// ===================================================================

class ccd::_Internal {
 public:
};

ccd::ccd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.ccd)
}
ccd::ccd(const ccd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pixeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pixeldata().empty()) {
    pixeldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pixeldata(), 
      GetArenaForAllocation());
  }
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:animax.ccd)
}

inline void ccd::SharedCtor() {
pixeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cnt_ = 0;
}

ccd::~ccd() {
  // @@protoc_insertion_point(destructor:animax.ccd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ccd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pixeldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ccd::ArenaDtor(void* object) {
  ccd* _this = reinterpret_cast< ccd* >(object);
  (void)_this;
}
void ccd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ccd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ccd::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.ccd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pixeldata_.ClearToEmpty();
  cnt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ccd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pixeldata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pixeldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ccd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.ccd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cnt = 1;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cnt(), target);
  }

  // bytes pixeldata = 2;
  if (!this->_internal_pixeldata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pixeldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.ccd)
  return target;
}

size_t ccd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.ccd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pixeldata = 2;
  if (!this->_internal_pixeldata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pixeldata());
  }

  // int32 cnt = 1;
  if (this->_internal_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ccd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ccd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ccd::GetClassData() const { return &_class_data_; }

void ccd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ccd *>(to)->MergeFrom(
      static_cast<const ccd &>(from));
}


void ccd::MergeFrom(const ccd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.ccd)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pixeldata().empty()) {
    _internal_set_pixeldata(from._internal_pixeldata());
  }
  if (from._internal_cnt() != 0) {
    _internal_set_cnt(from._internal_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ccd::CopyFrom(const ccd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.ccd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ccd::IsInitialized() const {
  return true;
}

void ccd::InternalSwap(ccd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pixeldata_, GetArenaForAllocation(),
      &other->pixeldata_, other->GetArenaForAllocation()
  );
  swap(cnt_, other->cnt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ccd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[3]);
}

// ===================================================================

class ccdsettings::_Internal {
 public:
};

ccdsettings::ccdsettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.ccdsettings)
}
ccdsettings::ccdsettings(const ccdsettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:animax.ccdsettings)
}

inline void ccdsettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ccdsettings::~ccdsettings() {
  // @@protoc_insertion_point(destructor:animax.ccdsettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ccdsettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ccdsettings::ArenaDtor(void* object) {
  ccdsettings* _this = reinterpret_cast< ccdsettings* >(object);
  (void)_this;
}
void ccdsettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ccdsettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ccdsettings::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.ccdsettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ccdsettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ccdsettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.ccdsettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.ccdsettings)
  return target;
}

size_t ccdsettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.ccdsettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ccdsettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ccdsettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ccdsettings::GetClassData() const { return &_class_data_; }

void ccdsettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ccdsettings *>(to)->MergeFrom(
      static_cast<const ccdsettings &>(from));
}


void ccdsettings::MergeFrom(const ccdsettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.ccdsettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ccdsettings::CopyFrom(const ccdsettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.ccdsettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ccdsettings::IsInitialized() const {
  return true;
}

void ccdsettings::InternalSwap(ccdsettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ccdsettings, height_)
      + sizeof(ccdsettings::height_)
      - PROTOBUF_FIELD_OFFSET(ccdsettings, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ccdsettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[4]);
}

// ===================================================================

class preview::_Internal {
 public:
};

preview::preview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.preview)
}
preview::preview(const preview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  previewdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previewdata().empty()) {
    previewdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previewdata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.preview)
}

inline void preview::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previewdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

preview::~preview() {
  // @@protoc_insertion_point(destructor:animax.preview)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void preview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previewdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void preview::ArenaDtor(void* object) {
  preview* _this = reinterpret_cast< preview* >(object);
  (void)_this;
}
void preview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void preview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void preview::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.preview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  previewdata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* preview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.preview.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previewdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_previewdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* preview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.preview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.preview.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes previewdata = 2;
  if (!this->_internal_previewdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_previewdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.preview)
  return target;
}

size_t preview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.preview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes previewdata = 2;
  if (!this->_internal_previewdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previewdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData preview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    preview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*preview::GetClassData() const { return &_class_data_; }

void preview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<preview *>(to)->MergeFrom(
      static_cast<const preview &>(from));
}


void preview::MergeFrom(const preview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.preview)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_previewdata().empty()) {
    _internal_set_previewdata(from._internal_previewdata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void preview::CopyFrom(const preview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool preview::IsInitialized() const {
  return true;
}

void preview::InternalSwap(preview* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previewdata_, GetArenaForAllocation(),
      &other->previewdata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata preview::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[5]);
}

// ===================================================================

class ROI::_Internal {
 public:
};

ROI::ROI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.ROI)
}
ROI::ROI(const ROI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  element_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_element().empty()) {
    element_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_element(), 
      GetArenaForAllocation());
  }
  line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line().empty()) {
    line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_line(), 
      GetArenaForAllocation());
  }
  roidata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roidata().empty()) {
    roidata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roidata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.ROI)
}

inline void ROI::SharedCtor() {
element_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
roidata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ROI::~ROI() {
  // @@protoc_insertion_point(destructor:animax.ROI)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ROI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  element_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roidata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ROI::ArenaDtor(void* object) {
  ROI* _this = reinterpret_cast< ROI* >(object);
  (void)_this;
}
void ROI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ROI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROI::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.ROI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.ClearToEmpty();
  line_.ClearToEmpty();
  roidata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_element();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.ROI.element"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.ROI.line"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes roidata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_roidata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.ROI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string element = 1;
  if (!this->_internal_element().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_element().data(), static_cast<int>(this->_internal_element().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.ROI.element");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element(), target);
  }

  // string line = 2;
  if (!this->_internal_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line().data(), static_cast<int>(this->_internal_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.ROI.line");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_line(), target);
  }

  // bytes roidata = 3;
  if (!this->_internal_roidata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_roidata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.ROI)
  return target;
}

size_t ROI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.ROI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string element = 1;
  if (!this->_internal_element().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_element());
  }

  // string line = 2;
  if (!this->_internal_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line());
  }

  // bytes roidata = 3;
  if (!this->_internal_roidata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_roidata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROI::GetClassData() const { return &_class_data_; }

void ROI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ROI *>(to)->MergeFrom(
      static_cast<const ROI &>(from));
}


void ROI::MergeFrom(const ROI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.ROI)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_element().empty()) {
    _internal_set_element(from._internal_element());
  }
  if (!from._internal_line().empty()) {
    _internal_set_line(from._internal_line());
  }
  if (!from._internal_roidata().empty()) {
    _internal_set_roidata(from._internal_roidata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROI::CopyFrom(const ROI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.ROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROI::IsInitialized() const {
  return true;
}

void ROI::InternalSwap(ROI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &element_, GetArenaForAllocation(),
      &other->element_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &line_, GetArenaForAllocation(),
      &other->line_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roidata_, GetArenaForAllocation(),
      &other->roidata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ROI::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[6]);
}

// ===================================================================

class scanstatus::_Internal {
 public:
};

scanstatus::scanstatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.scanstatus)
}
scanstatus::scanstatus(const scanstatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.scanstatus)
}

inline void scanstatus::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

scanstatus::~scanstatus() {
  // @@protoc_insertion_point(destructor:animax.scanstatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void scanstatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void scanstatus::ArenaDtor(void* object) {
  scanstatus* _this = reinterpret_cast< scanstatus* >(object);
  (void)_this;
}
void scanstatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scanstatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void scanstatus::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.scanstatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scanstatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.scanstatus.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scanstatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.scanstatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.scanstatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.scanstatus)
  return target;
}

size_t scanstatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.scanstatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData scanstatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    scanstatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*scanstatus::GetClassData() const { return &_class_data_; }

void scanstatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<scanstatus *>(to)->MergeFrom(
      static_cast<const scanstatus &>(from));
}


void scanstatus::MergeFrom(const scanstatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.scanstatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void scanstatus::CopyFrom(const scanstatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.scanstatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scanstatus::IsInitialized() const {
  return true;
}

void scanstatus::InternalSwap(scanstatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata scanstatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace animax
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::animax::Measurement* Arena::CreateMaybeMessage< ::animax::Measurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::Measurement >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::Metadata* Arena::CreateMaybeMessage< ::animax::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::sdd* Arena::CreateMaybeMessage< ::animax::sdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::sdd >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::ccd* Arena::CreateMaybeMessage< ::animax::ccd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::ccd >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::ccdsettings* Arena::CreateMaybeMessage< ::animax::ccdsettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::ccdsettings >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::preview* Arena::CreateMaybeMessage< ::animax::preview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::preview >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::ROI* Arena::CreateMaybeMessage< ::animax::ROI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::ROI >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::scanstatus* Arena::CreateMaybeMessage< ::animax::scanstatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::scanstatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
