// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animax.proto

#include "animax.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace animax {
constexpr Measurement::Measurement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : energies_()
  , _energies_cached_byte_size_(0)
  , scantype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , save_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , save_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roidefinitions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scantitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , datasinkip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sddip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ccdip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_note_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0)
  , acquisition_time_(0)
  , energy_count_(0)
  , datasinkport_(0)
  , sddport_(0)
  , ccdport_(0)
  , sebitcount_(0)
  , filter_(0)
  , energyrange_(0)
  , tempmode_(0)
  , zeropeakperiod_(0)
  , acquisitionmode_(0)
  , checktemperature_(0)
  , sdd1_(false)
  , sdd2_(false)
  , sdd3_(false)
  , sdd4_(false)
  , binning_x_(0)
  , binning_y_(0)
  , ccdheight_(0)
  , ccdwidth_(0)
  , pixelcount_(0)
  , frametransfer_mode_(0)
  , number_of_accumulations_(0)
  , number_of_scans_(0)
  , set_kinetic_cycle_time_(0)
  , read_mode_(0)
  , acquision_mode_(0)
  , shutter_mode_(0)
  , shutter_output_signal_(0)
  , shutter_open_time_(0)
  , shutter_close_time_(0)
  , triggermode_(0)
  , set_integration_time_(0)
  , exposure_time_(0)
  , accumulation_time_(0)
  , kinetic_time_(0)
  , min_temp_(0)
  , max_temp_(0)
  , target_temp_(0)
  , pre_amp_gain_(0)
  , em_gain_mode_(0)
  , em_gain_(0)
  , sample_width_(0)
  , sample_height_(0)
  , sample_rotation_angle_(0){}
struct MeasurementDefaultTypeInternal {
  constexpr MeasurementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeasurementDefaultTypeInternal() {}
  union {
    Measurement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeasurementDefaultTypeInternal _Measurement_default_instance_;
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acquisition_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , acquisition_number_(0)
  , set_energy_(0)
  , beamline_energy_(0)
  , ringcurrent_(0)
  , horizontal_shutter_(false)
  , vertical_shutter_(false){}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
constexpr sdd::sdd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pixeldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct sddDefaultTypeInternal {
  constexpr sddDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sddDefaultTypeInternal() {}
  union {
    sdd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sddDefaultTypeInternal _sdd_default_instance_;
constexpr ccd::ccd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pixeldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cnt_(0){}
struct ccdDefaultTypeInternal {
  constexpr ccdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ccdDefaultTypeInternal() {}
  union {
    ccd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ccdDefaultTypeInternal _ccd_default_instance_;
constexpr ccdsettings::ccdsettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : binning_x_(0)
  , binning_y_(0)
  , ccdheight_(0)
  , ccdwidth_(0)
  , pixelcount_(0)
  , frametransfer_mode_(0)
  , number_of_accumulations_(0)
  , number_of_scans_(0)
  , set_kinetic_cycle_time_(0)
  , read_mode_(0)
  , acquision_mode_(0)
  , shutter_mode_(0)
  , shutter_output_signal_(0)
  , shutter_open_time_(0)
  , shutter_close_time_(0)
  , triggermode_(0)
  , set_integration_time_(0)
  , exposure_time_(0)
  , accumulation_time_(0)
  , kinetic_time_(0)
  , min_temp_(0)
  , max_temp_(0)
  , target_temp_(0)
  , pre_amp_gain_(0)
  , em_gain_mode_(0)
  , em_gain_(0){}
struct ccdsettingsDefaultTypeInternal {
  constexpr ccdsettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ccdsettingsDefaultTypeInternal() {}
  union {
    ccdsettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ccdsettingsDefaultTypeInternal _ccdsettings_default_instance_;
constexpr preview::preview(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previewdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct previewDefaultTypeInternal {
  constexpr previewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~previewDefaultTypeInternal() {}
  union {
    preview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT previewDefaultTypeInternal _preview_default_instance_;
constexpr ROI::ROI(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roidata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ROIDefaultTypeInternal {
  constexpr ROIDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ROIDefaultTypeInternal() {}
  union {
    ROI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ROIDefaultTypeInternal _ROI_default_instance_;
constexpr scanstatus::scanstatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct scanstatusDefaultTypeInternal {
  constexpr scanstatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~scanstatusDefaultTypeInternal() {}
  union {
    scanstatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT scanstatusDefaultTypeInternal _scanstatus_default_instance_;
constexpr scannote::scannote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct scannoteDefaultTypeInternal {
  constexpr scannoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~scannoteDefaultTypeInternal() {}
  union {
    scannote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT scannoteDefaultTypeInternal _scannote_default_instance_;
}  // namespace animax
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_animax_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_animax_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_animax_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_animax_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, width_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, height_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, acquisition_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, scantype_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, save_path_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, save_file_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, energy_count_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, energies_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, roidefinitions_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, scantitle_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, datasinkip_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, datasinkport_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sddip_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sddport_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, ccdip_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, ccdport_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sebitcount_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, filter_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, energyrange_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, tempmode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, zeropeakperiod_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, acquisitionmode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, checktemperature_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sdd1_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sdd2_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sdd3_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sdd4_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, binning_x_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, binning_y_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, ccdheight_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, ccdwidth_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, pixelcount_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, frametransfer_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, number_of_accumulations_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, number_of_scans_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, set_kinetic_cycle_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, read_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, acquision_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, shutter_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, shutter_output_signal_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, shutter_open_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, shutter_close_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, triggermode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, set_integration_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, exposure_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, accumulation_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, kinetic_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, min_temp_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, max_temp_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, target_temp_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, pre_amp_gain_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, em_gain_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, em_gain_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_name_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_type_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_note_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_width_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_height_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, sample_rotation_angle_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, notes_),
  PROTOBUF_FIELD_OFFSET(::animax::Measurement, userdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, acquisition_number_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, acquisition_time_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, set_energy_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, beamline_energy_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, ringcurrent_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, horizontal_shutter_),
  PROTOBUF_FIELD_OFFSET(::animax::Metadata, vertical_shutter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::sdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::sdd, pixeldata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::ccd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::ccd, cnt_),
  PROTOBUF_FIELD_OFFSET(::animax::ccd, pixeldata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, binning_x_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, binning_y_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, ccdheight_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, ccdwidth_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, pixelcount_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, frametransfer_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, number_of_accumulations_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, number_of_scans_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, set_kinetic_cycle_time_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, read_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, acquision_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, shutter_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, shutter_output_signal_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, shutter_open_time_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, shutter_close_time_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, triggermode_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, set_integration_time_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, exposure_time_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, accumulation_time_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, kinetic_time_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, min_temp_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, max_temp_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, target_temp_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, pre_amp_gain_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, em_gain_mode_),
  PROTOBUF_FIELD_OFFSET(::animax::ccdsettings, em_gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::preview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::preview, type_),
  PROTOBUF_FIELD_OFFSET(::animax::preview, previewdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::ROI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::ROI, element_),
  PROTOBUF_FIELD_OFFSET(::animax::ROI, line_),
  PROTOBUF_FIELD_OFFSET(::animax::ROI, roidata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::scanstatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::scanstatus, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::animax::scannote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::animax::scannote, text_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::animax::Measurement)},
  { 66, -1, sizeof(::animax::Metadata)},
  { 78, -1, sizeof(::animax::sdd)},
  { 84, -1, sizeof(::animax::ccd)},
  { 91, -1, sizeof(::animax::ccdsettings)},
  { 122, -1, sizeof(::animax::preview)},
  { 129, -1, sizeof(::animax::ROI)},
  { 137, -1, sizeof(::animax::scanstatus)},
  { 143, -1, sizeof(::animax::scannote)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_Measurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_sdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_ccd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_ccdsettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_preview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_ROI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_scanstatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::animax::_scannote_default_instance_),
};

const char descriptor_table_protodef_animax_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014animax.proto\022\006animax\"\222\n\n\013Measurement\022\r"
  "\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\030\n\020acquisi"
  "tion_time\030\003 \001(\005\022\020\n\010scantype\030\004 \001(\t\022\021\n\tsav"
  "e_path\030\005 \001(\t\022\021\n\tsave_file\030\006 \001(\t\022\024\n\014energ"
  "y_count\030\007 \001(\005\022\020\n\010energies\030\010 \003(\005\022\026\n\016ROIde"
  "finitions\030\t \001(\t\022\021\n\tscantitle\030\n \001(\t\022\022\n\nda"
  "tasinkIP\030\013 \001(\t\022\024\n\014datasinkPort\030\014 \001(\005\022\r\n\005"
  "sddIP\030\r \001(\t\022\017\n\007sddPort\030\016 \001(\005\022\r\n\005ccdIP\030\017 "
  "\001(\t\022\017\n\007ccdPort\030\020 \001(\005\022\022\n\nsebitcount\030\021 \001(\005"
  "\022\016\n\006filter\030\022 \001(\005\022\023\n\013energyrange\030\023 \001(\005\022\020\n"
  "\010tempmode\030\024 \001(\005\022\026\n\016zeropeakperiod\030\025 \001(\005\022"
  "\027\n\017acquisitionmode\030\026 \001(\005\022\030\n\020checktempera"
  "ture\030\027 \001(\005\022\014\n\004sdd1\030\030 \001(\010\022\014\n\004sdd2\030\031 \001(\010\022\014"
  "\n\004sdd3\030\032 \001(\010\022\014\n\004sdd4\030\033 \001(\010\022\021\n\tbinning_x\030"
  "\034 \001(\005\022\021\n\tbinning_y\030\035 \001(\005\022\021\n\tccdheight\030\036 "
  "\001(\005\022\020\n\010ccdwidth\030\037 \001(\005\022\022\n\npixelcount\030  \001("
  "\005\022\032\n\022frametransfer_mode\030! \001(\005\022\037\n\027number_"
  "of_accumulations\030\" \001(\005\022\027\n\017number_of_scan"
  "s\030# \001(\005\022\036\n\026set_kinetic_cycle_time\030$ \001(\002\022"
  "\021\n\tread_mode\030% \001(\005\022\026\n\016acquision_mode\030& \001"
  "(\005\022\024\n\014shutter_mode\030\' \001(\005\022\035\n\025shutter_outp"
  "ut_signal\030( \001(\005\022\031\n\021shutter_open_time\030) \001"
  "(\005\022\032\n\022shutter_close_time\030* \001(\005\022\023\n\013trigge"
  "rmode\030+ \001(\005\022\034\n\024set_integration_time\030, \001("
  "\002\022\025\n\rexposure_time\030- \001(\002\022\031\n\021accumulation"
  "_time\030. \001(\002\022\024\n\014kinetic_time\030/ \001(\002\022\020\n\010min"
  "_temp\0300 \001(\005\022\020\n\010max_temp\0301 \001(\005\022\023\n\013target_"
  "temp\0302 \001(\005\022\024\n\014pre_amp_gain\0303 \001(\005\022\024\n\014em_g"
  "ain_mode\0304 \001(\005\022\017\n\007em_gain\0305 \001(\005\022\023\n\013sampl"
  "e_name\0306 \001(\t\022\023\n\013sample_type\0307 \001(\t\022\023\n\013sam"
  "ple_note\0308 \001(\t\022\024\n\014sample_width\0309 \001(\002\022\025\n\r"
  "sample_height\030: \001(\002\022\035\n\025sample_rotation_a"
  "ngle\030; \001(\002\022\r\n\005notes\030< \001(\t\022\020\n\010userdata\030= "
  "\001(\t\"\270\001\n\010Metadata\022\032\n\022acquisition_number\030\001"
  " \001(\005\022\030\n\020acquisition_time\030\002 \001(\t\022\022\n\nset_en"
  "ergy\030\003 \001(\002\022\027\n\017beamline_energy\030\004 \001(\002\022\023\n\013r"
  "ingcurrent\030\005 \001(\002\022\032\n\022horizontal_shutter\030\006"
  " \001(\010\022\030\n\020vertical_shutter\030\007 \001(\010\"\030\n\003sdd\022\021\n"
  "\tpixeldata\030\001 \001(\014\"%\n\003ccd\022\013\n\003cnt\030\001 \001(\005\022\021\n\t"
  "pixeldata\030\002 \001(\014\"\352\004\n\013ccdsettings\022\021\n\tbinni"
  "ng_x\030\001 \001(\005\022\021\n\tbinning_y\030\002 \001(\005\022\021\n\tccdheig"
  "ht\030\003 \001(\005\022\020\n\010ccdwidth\030\004 \001(\005\022\022\n\npixelcount"
  "\030\005 \001(\005\022\032\n\022frametransfer_mode\030\006 \001(\005\022\037\n\027nu"
  "mber_of_accumulations\030\007 \001(\005\022\027\n\017number_of"
  "_scans\030\010 \001(\005\022\036\n\026set_kinetic_cycle_time\030\t"
  " \001(\002\022\021\n\tread_mode\030\n \001(\005\022\026\n\016acquision_mod"
  "e\030\013 \001(\005\022\024\n\014shutter_mode\030\014 \001(\005\022\035\n\025shutter"
  "_output_signal\030\r \001(\005\022\031\n\021shutter_open_tim"
  "e\030\016 \001(\002\022\032\n\022shutter_close_time\030\017 \001(\002\022\023\n\013t"
  "riggermode\030\020 \001(\005\022\034\n\024set_integration_time"
  "\030\021 \001(\002\022\025\n\rexposure_time\030\022 \001(\002\022\031\n\021accumul"
  "ation_time\030\023 \001(\002\022\024\n\014kinetic_time\030\024 \001(\002\022\020"
  "\n\010min_temp\030\025 \001(\005\022\020\n\010max_temp\030\026 \001(\005\022\023\n\013ta"
  "rget_temp\030\027 \001(\005\022\024\n\014pre_amp_gain\030\030 \001(\005\022\024\n"
  "\014em_gain_mode\030\031 \001(\005\022\017\n\007em_gain\030\032 \001(\005\",\n\007"
  "preview\022\014\n\004type\030\001 \001(\t\022\023\n\013previewdata\030\002 \001"
  "(\014\"5\n\003ROI\022\017\n\007element\030\001 \001(\t\022\014\n\004line\030\002 \001(\t"
  "\022\017\n\007roidata\030\003 \001(\014\"\034\n\nscanstatus\022\016\n\006statu"
  "s\030\001 \001(\t\"\030\n\010scannote\022\014\n\004text\030\001 \001(\tb\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_animax_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_animax_2eproto = {
  false, false, 2361, descriptor_table_protodef_animax_2eproto, "animax.proto", 
  &descriptor_table_animax_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_animax_2eproto::offsets,
  file_level_metadata_animax_2eproto, file_level_enum_descriptors_animax_2eproto, file_level_service_descriptors_animax_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_animax_2eproto_getter() {
  return &descriptor_table_animax_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_animax_2eproto(&descriptor_table_animax_2eproto);
namespace animax {

// ===================================================================

class Measurement::_Internal {
 public:
};

Measurement::Measurement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  energies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      energies_(from.energies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scantype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scantype().empty()) {
    scantype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scantype(), 
      GetArenaForAllocation());
  }
  save_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_save_path().empty()) {
    save_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_save_path(), 
      GetArenaForAllocation());
  }
  save_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_save_file().empty()) {
    save_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_save_file(), 
      GetArenaForAllocation());
  }
  roidefinitions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roidefinitions().empty()) {
    roidefinitions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roidefinitions(), 
      GetArenaForAllocation());
  }
  scantitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scantitle().empty()) {
    scantitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scantitle(), 
      GetArenaForAllocation());
  }
  datasinkip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datasinkip().empty()) {
    datasinkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_datasinkip(), 
      GetArenaForAllocation());
  }
  sddip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sddip().empty()) {
    sddip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sddip(), 
      GetArenaForAllocation());
  }
  ccdip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ccdip().empty()) {
    ccdip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ccdip(), 
      GetArenaForAllocation());
  }
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample_name().empty()) {
    sample_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sample_name(), 
      GetArenaForAllocation());
  }
  sample_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample_type().empty()) {
    sample_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sample_type(), 
      GetArenaForAllocation());
  }
  sample_note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample_note().empty()) {
    sample_note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sample_note(), 
      GetArenaForAllocation());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notes(), 
      GetArenaForAllocation());
  }
  userdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userdata().empty()) {
    userdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userdata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rotation_angle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sample_rotation_angle_));
  // @@protoc_insertion_point(copy_constructor:animax.Measurement)
}

inline void Measurement::SharedCtor() {
scantype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
save_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
save_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
roidefinitions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scantitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
datasinkip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sddip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ccdip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sample_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sample_note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_rotation_angle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sample_rotation_angle_));
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:animax.Measurement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Measurement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  scantype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roidefinitions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scantitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datasinkip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sddip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ccdip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Measurement::ArenaDtor(void* object) {
  Measurement* _this = reinterpret_cast< Measurement* >(object);
  (void)_this;
}
void Measurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Measurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  energies_.Clear();
  scantype_.ClearToEmpty();
  save_path_.ClearToEmpty();
  save_file_.ClearToEmpty();
  roidefinitions_.ClearToEmpty();
  scantitle_.ClearToEmpty();
  datasinkip_.ClearToEmpty();
  sddip_.ClearToEmpty();
  ccdip_.ClearToEmpty();
  sample_name_.ClearToEmpty();
  sample_type_.ClearToEmpty();
  sample_note_.ClearToEmpty();
  notes_.ClearToEmpty();
  userdata_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rotation_angle_) -
      reinterpret_cast<char*>(&width_)) + sizeof(sample_rotation_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Measurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 acquisition_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          acquisition_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scantype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scantype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.scantype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string save_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_save_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.save_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string save_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_save_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.save_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 energy_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          energy_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 energies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_energies(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_energies(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ROIdefinitions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_roidefinitions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.ROIdefinitions"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scantitle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_scantitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.scantitle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string datasinkIP = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_datasinkip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.datasinkIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 datasinkPort = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          datasinkport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sddIP = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_sddip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.sddIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sddPort = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sddport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ccdIP = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_ccdip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.ccdIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ccdPort = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ccdport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sebitcount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          sebitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 filter = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 energyrange = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          energyrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tempmode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          tempmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zeropeakperiod = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          zeropeakperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 acquisitionmode = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          acquisitionmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 checktemperature = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          checktemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sdd1 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          sdd1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sdd2 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          sdd2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sdd3 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          sdd3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sdd4 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          sdd4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 binning_x = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          binning_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 binning_y = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          binning_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ccdheight = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ccdheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ccdwidth = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ccdwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pixelcount = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          pixelcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frametransfer_mode = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frametransfer_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_of_accumulations = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_of_accumulations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_of_scans = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_of_scans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float set_kinetic_cycle_time = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          set_kinetic_cycle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 read_mode = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          read_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 acquision_mode = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          acquision_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shutter_mode = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          shutter_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shutter_output_signal = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          shutter_output_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shutter_open_time = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          shutter_open_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shutter_close_time = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          shutter_close_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 triggermode = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          triggermode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float set_integration_time = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          set_integration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float exposure_time = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          exposure_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float accumulation_time = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          accumulation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kinetic_time = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          kinetic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 min_temp = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          min_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_temp = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          max_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_temp = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          target_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pre_amp_gain = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          pre_amp_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 em_gain_mode = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          em_gain_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 em_gain = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          em_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_name = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_sample_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.sample_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_type = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_sample_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.sample_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_note = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_sample_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.sample_note"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sample_width = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          sample_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sample_height = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          sample_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sample_rotation_angle = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          sample_rotation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string notes = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userdata = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_userdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Measurement.userdata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Measurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 acquisition_time = 3;
  if (this->_internal_acquisition_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_acquisition_time(), target);
  }

  // string scantype = 4;
  if (!this->_internal_scantype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scantype().data(), static_cast<int>(this->_internal_scantype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.scantype");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scantype(), target);
  }

  // string save_path = 5;
  if (!this->_internal_save_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_save_path().data(), static_cast<int>(this->_internal_save_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.save_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_save_path(), target);
  }

  // string save_file = 6;
  if (!this->_internal_save_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_save_file().data(), static_cast<int>(this->_internal_save_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.save_file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_save_file(), target);
  }

  // int32 energy_count = 7;
  if (this->_internal_energy_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_energy_count(), target);
  }

  // repeated int32 energies = 8;
  {
    int byte_size = _energies_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_energies(), byte_size, target);
    }
  }

  // string ROIdefinitions = 9;
  if (!this->_internal_roidefinitions().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roidefinitions().data(), static_cast<int>(this->_internal_roidefinitions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.ROIdefinitions");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_roidefinitions(), target);
  }

  // string scantitle = 10;
  if (!this->_internal_scantitle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scantitle().data(), static_cast<int>(this->_internal_scantitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.scantitle");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_scantitle(), target);
  }

  // string datasinkIP = 11;
  if (!this->_internal_datasinkip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datasinkip().data(), static_cast<int>(this->_internal_datasinkip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.datasinkIP");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_datasinkip(), target);
  }

  // int32 datasinkPort = 12;
  if (this->_internal_datasinkport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_datasinkport(), target);
  }

  // string sddIP = 13;
  if (!this->_internal_sddip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sddip().data(), static_cast<int>(this->_internal_sddip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.sddIP");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_sddip(), target);
  }

  // int32 sddPort = 14;
  if (this->_internal_sddport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_sddport(), target);
  }

  // string ccdIP = 15;
  if (!this->_internal_ccdip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ccdip().data(), static_cast<int>(this->_internal_ccdip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.ccdIP");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_ccdip(), target);
  }

  // int32 ccdPort = 16;
  if (this->_internal_ccdport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_ccdport(), target);
  }

  // int32 sebitcount = 17;
  if (this->_internal_sebitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_sebitcount(), target);
  }

  // int32 filter = 18;
  if (this->_internal_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_filter(), target);
  }

  // int32 energyrange = 19;
  if (this->_internal_energyrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_energyrange(), target);
  }

  // int32 tempmode = 20;
  if (this->_internal_tempmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_tempmode(), target);
  }

  // int32 zeropeakperiod = 21;
  if (this->_internal_zeropeakperiod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_zeropeakperiod(), target);
  }

  // int32 acquisitionmode = 22;
  if (this->_internal_acquisitionmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_acquisitionmode(), target);
  }

  // int32 checktemperature = 23;
  if (this->_internal_checktemperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_checktemperature(), target);
  }

  // bool sdd1 = 24;
  if (this->_internal_sdd1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_sdd1(), target);
  }

  // bool sdd2 = 25;
  if (this->_internal_sdd2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_sdd2(), target);
  }

  // bool sdd3 = 26;
  if (this->_internal_sdd3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_sdd3(), target);
  }

  // bool sdd4 = 27;
  if (this->_internal_sdd4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_sdd4(), target);
  }

  // int32 binning_x = 28;
  if (this->_internal_binning_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_binning_x(), target);
  }

  // int32 binning_y = 29;
  if (this->_internal_binning_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_binning_y(), target);
  }

  // int32 ccdheight = 30;
  if (this->_internal_ccdheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_ccdheight(), target);
  }

  // int32 ccdwidth = 31;
  if (this->_internal_ccdwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_ccdwidth(), target);
  }

  // int32 pixelcount = 32;
  if (this->_internal_pixelcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_pixelcount(), target);
  }

  // int32 frametransfer_mode = 33;
  if (this->_internal_frametransfer_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_frametransfer_mode(), target);
  }

  // int32 number_of_accumulations = 34;
  if (this->_internal_number_of_accumulations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_number_of_accumulations(), target);
  }

  // int32 number_of_scans = 35;
  if (this->_internal_number_of_scans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_number_of_scans(), target);
  }

  // float set_kinetic_cycle_time = 36;
  if (!(this->_internal_set_kinetic_cycle_time() <= 0 && this->_internal_set_kinetic_cycle_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_set_kinetic_cycle_time(), target);
  }

  // int32 read_mode = 37;
  if (this->_internal_read_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_read_mode(), target);
  }

  // int32 acquision_mode = 38;
  if (this->_internal_acquision_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_acquision_mode(), target);
  }

  // int32 shutter_mode = 39;
  if (this->_internal_shutter_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_shutter_mode(), target);
  }

  // int32 shutter_output_signal = 40;
  if (this->_internal_shutter_output_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_shutter_output_signal(), target);
  }

  // int32 shutter_open_time = 41;
  if (this->_internal_shutter_open_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_shutter_open_time(), target);
  }

  // int32 shutter_close_time = 42;
  if (this->_internal_shutter_close_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_shutter_close_time(), target);
  }

  // int32 triggermode = 43;
  if (this->_internal_triggermode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_triggermode(), target);
  }

  // float set_integration_time = 44;
  if (!(this->_internal_set_integration_time() <= 0 && this->_internal_set_integration_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(44, this->_internal_set_integration_time(), target);
  }

  // float exposure_time = 45;
  if (!(this->_internal_exposure_time() <= 0 && this->_internal_exposure_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_exposure_time(), target);
  }

  // float accumulation_time = 46;
  if (!(this->_internal_accumulation_time() <= 0 && this->_internal_accumulation_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->_internal_accumulation_time(), target);
  }

  // float kinetic_time = 47;
  if (!(this->_internal_kinetic_time() <= 0 && this->_internal_kinetic_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(47, this->_internal_kinetic_time(), target);
  }

  // int32 min_temp = 48;
  if (this->_internal_min_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_min_temp(), target);
  }

  // int32 max_temp = 49;
  if (this->_internal_max_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_max_temp(), target);
  }

  // int32 target_temp = 50;
  if (this->_internal_target_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_target_temp(), target);
  }

  // int32 pre_amp_gain = 51;
  if (this->_internal_pre_amp_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->_internal_pre_amp_gain(), target);
  }

  // int32 em_gain_mode = 52;
  if (this->_internal_em_gain_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->_internal_em_gain_mode(), target);
  }

  // int32 em_gain = 53;
  if (this->_internal_em_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->_internal_em_gain(), target);
  }

  // string sample_name = 54;
  if (!this->_internal_sample_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sample_name().data(), static_cast<int>(this->_internal_sample_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.sample_name");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_sample_name(), target);
  }

  // string sample_type = 55;
  if (!this->_internal_sample_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sample_type().data(), static_cast<int>(this->_internal_sample_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.sample_type");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_sample_type(), target);
  }

  // string sample_note = 56;
  if (!this->_internal_sample_note().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sample_note().data(), static_cast<int>(this->_internal_sample_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.sample_note");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_sample_note(), target);
  }

  // float sample_width = 57;
  if (!(this->_internal_sample_width() <= 0 && this->_internal_sample_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(57, this->_internal_sample_width(), target);
  }

  // float sample_height = 58;
  if (!(this->_internal_sample_height() <= 0 && this->_internal_sample_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(58, this->_internal_sample_height(), target);
  }

  // float sample_rotation_angle = 59;
  if (!(this->_internal_sample_rotation_angle() <= 0 && this->_internal_sample_rotation_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(59, this->_internal_sample_rotation_angle(), target);
  }

  // string notes = 60;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.notes");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_notes(), target);
  }

  // string userdata = 61;
  if (!this->_internal_userdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userdata().data(), static_cast<int>(this->_internal_userdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Measurement.userdata");
    target = stream->WriteStringMaybeAliased(
        61, this->_internal_userdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.Measurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 energies = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->energies_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _energies_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string scantype = 4;
  if (!this->_internal_scantype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scantype());
  }

  // string save_path = 5;
  if (!this->_internal_save_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_save_path());
  }

  // string save_file = 6;
  if (!this->_internal_save_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_save_file());
  }

  // string ROIdefinitions = 9;
  if (!this->_internal_roidefinitions().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roidefinitions());
  }

  // string scantitle = 10;
  if (!this->_internal_scantitle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scantitle());
  }

  // string datasinkIP = 11;
  if (!this->_internal_datasinkip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datasinkip());
  }

  // string sddIP = 13;
  if (!this->_internal_sddip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sddip());
  }

  // string ccdIP = 15;
  if (!this->_internal_ccdip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ccdip());
  }

  // string sample_name = 54;
  if (!this->_internal_sample_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sample_name());
  }

  // string sample_type = 55;
  if (!this->_internal_sample_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sample_type());
  }

  // string sample_note = 56;
  if (!this->_internal_sample_note().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sample_note());
  }

  // string notes = 60;
  if (!this->_internal_notes().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // string userdata = 61;
  if (!this->_internal_userdata().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userdata());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 acquisition_time = 3;
  if (this->_internal_acquisition_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acquisition_time());
  }

  // int32 energy_count = 7;
  if (this->_internal_energy_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_energy_count());
  }

  // int32 datasinkPort = 12;
  if (this->_internal_datasinkport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_datasinkport());
  }

  // int32 sddPort = 14;
  if (this->_internal_sddport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sddport());
  }

  // int32 ccdPort = 16;
  if (this->_internal_ccdport() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ccdport());
  }

  // int32 sebitcount = 17;
  if (this->_internal_sebitcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sebitcount());
  }

  // int32 filter = 18;
  if (this->_internal_filter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filter());
  }

  // int32 energyrange = 19;
  if (this->_internal_energyrange() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_energyrange());
  }

  // int32 tempmode = 20;
  if (this->_internal_tempmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tempmode());
  }

  // int32 zeropeakperiod = 21;
  if (this->_internal_zeropeakperiod() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zeropeakperiod());
  }

  // int32 acquisitionmode = 22;
  if (this->_internal_acquisitionmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acquisitionmode());
  }

  // int32 checktemperature = 23;
  if (this->_internal_checktemperature() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checktemperature());
  }

  // bool sdd1 = 24;
  if (this->_internal_sdd1() != 0) {
    total_size += 2 + 1;
  }

  // bool sdd2 = 25;
  if (this->_internal_sdd2() != 0) {
    total_size += 2 + 1;
  }

  // bool sdd3 = 26;
  if (this->_internal_sdd3() != 0) {
    total_size += 2 + 1;
  }

  // bool sdd4 = 27;
  if (this->_internal_sdd4() != 0) {
    total_size += 2 + 1;
  }

  // int32 binning_x = 28;
  if (this->_internal_binning_x() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_binning_x());
  }

  // int32 binning_y = 29;
  if (this->_internal_binning_y() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_binning_y());
  }

  // int32 ccdheight = 30;
  if (this->_internal_ccdheight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ccdheight());
  }

  // int32 ccdwidth = 31;
  if (this->_internal_ccdwidth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ccdwidth());
  }

  // int32 pixelcount = 32;
  if (this->_internal_pixelcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pixelcount());
  }

  // int32 frametransfer_mode = 33;
  if (this->_internal_frametransfer_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frametransfer_mode());
  }

  // int32 number_of_accumulations = 34;
  if (this->_internal_number_of_accumulations() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_accumulations());
  }

  // int32 number_of_scans = 35;
  if (this->_internal_number_of_scans() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_scans());
  }

  // float set_kinetic_cycle_time = 36;
  if (!(this->_internal_set_kinetic_cycle_time() <= 0 && this->_internal_set_kinetic_cycle_time() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 read_mode = 37;
  if (this->_internal_read_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_read_mode());
  }

  // int32 acquision_mode = 38;
  if (this->_internal_acquision_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acquision_mode());
  }

  // int32 shutter_mode = 39;
  if (this->_internal_shutter_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shutter_mode());
  }

  // int32 shutter_output_signal = 40;
  if (this->_internal_shutter_output_signal() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shutter_output_signal());
  }

  // int32 shutter_open_time = 41;
  if (this->_internal_shutter_open_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shutter_open_time());
  }

  // int32 shutter_close_time = 42;
  if (this->_internal_shutter_close_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shutter_close_time());
  }

  // int32 triggermode = 43;
  if (this->_internal_triggermode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_triggermode());
  }

  // float set_integration_time = 44;
  if (!(this->_internal_set_integration_time() <= 0 && this->_internal_set_integration_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float exposure_time = 45;
  if (!(this->_internal_exposure_time() <= 0 && this->_internal_exposure_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float accumulation_time = 46;
  if (!(this->_internal_accumulation_time() <= 0 && this->_internal_accumulation_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float kinetic_time = 47;
  if (!(this->_internal_kinetic_time() <= 0 && this->_internal_kinetic_time() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 min_temp = 48;
  if (this->_internal_min_temp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_temp());
  }

  // int32 max_temp = 49;
  if (this->_internal_max_temp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_temp());
  }

  // int32 target_temp = 50;
  if (this->_internal_target_temp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_temp());
  }

  // int32 pre_amp_gain = 51;
  if (this->_internal_pre_amp_gain() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pre_amp_gain());
  }

  // int32 em_gain_mode = 52;
  if (this->_internal_em_gain_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_em_gain_mode());
  }

  // int32 em_gain = 53;
  if (this->_internal_em_gain() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_em_gain());
  }

  // float sample_width = 57;
  if (!(this->_internal_sample_width() <= 0 && this->_internal_sample_width() >= 0)) {
    total_size += 2 + 4;
  }

  // float sample_height = 58;
  if (!(this->_internal_sample_height() <= 0 && this->_internal_sample_height() >= 0)) {
    total_size += 2 + 4;
  }

  // float sample_rotation_angle = 59;
  if (!(this->_internal_sample_rotation_angle() <= 0 && this->_internal_sample_rotation_angle() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Measurement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Measurement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Measurement::GetClassData() const { return &_class_data_; }

void Measurement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Measurement *>(to)->MergeFrom(
      static_cast<const Measurement &>(from));
}


void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  energies_.MergeFrom(from.energies_);
  if (!from._internal_scantype().empty()) {
    _internal_set_scantype(from._internal_scantype());
  }
  if (!from._internal_save_path().empty()) {
    _internal_set_save_path(from._internal_save_path());
  }
  if (!from._internal_save_file().empty()) {
    _internal_set_save_file(from._internal_save_file());
  }
  if (!from._internal_roidefinitions().empty()) {
    _internal_set_roidefinitions(from._internal_roidefinitions());
  }
  if (!from._internal_scantitle().empty()) {
    _internal_set_scantitle(from._internal_scantitle());
  }
  if (!from._internal_datasinkip().empty()) {
    _internal_set_datasinkip(from._internal_datasinkip());
  }
  if (!from._internal_sddip().empty()) {
    _internal_set_sddip(from._internal_sddip());
  }
  if (!from._internal_ccdip().empty()) {
    _internal_set_ccdip(from._internal_ccdip());
  }
  if (!from._internal_sample_name().empty()) {
    _internal_set_sample_name(from._internal_sample_name());
  }
  if (!from._internal_sample_type().empty()) {
    _internal_set_sample_type(from._internal_sample_type());
  }
  if (!from._internal_sample_note().empty()) {
    _internal_set_sample_note(from._internal_sample_note());
  }
  if (!from._internal_notes().empty()) {
    _internal_set_notes(from._internal_notes());
  }
  if (!from._internal_userdata().empty()) {
    _internal_set_userdata(from._internal_userdata());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_acquisition_time() != 0) {
    _internal_set_acquisition_time(from._internal_acquisition_time());
  }
  if (from._internal_energy_count() != 0) {
    _internal_set_energy_count(from._internal_energy_count());
  }
  if (from._internal_datasinkport() != 0) {
    _internal_set_datasinkport(from._internal_datasinkport());
  }
  if (from._internal_sddport() != 0) {
    _internal_set_sddport(from._internal_sddport());
  }
  if (from._internal_ccdport() != 0) {
    _internal_set_ccdport(from._internal_ccdport());
  }
  if (from._internal_sebitcount() != 0) {
    _internal_set_sebitcount(from._internal_sebitcount());
  }
  if (from._internal_filter() != 0) {
    _internal_set_filter(from._internal_filter());
  }
  if (from._internal_energyrange() != 0) {
    _internal_set_energyrange(from._internal_energyrange());
  }
  if (from._internal_tempmode() != 0) {
    _internal_set_tempmode(from._internal_tempmode());
  }
  if (from._internal_zeropeakperiod() != 0) {
    _internal_set_zeropeakperiod(from._internal_zeropeakperiod());
  }
  if (from._internal_acquisitionmode() != 0) {
    _internal_set_acquisitionmode(from._internal_acquisitionmode());
  }
  if (from._internal_checktemperature() != 0) {
    _internal_set_checktemperature(from._internal_checktemperature());
  }
  if (from._internal_sdd1() != 0) {
    _internal_set_sdd1(from._internal_sdd1());
  }
  if (from._internal_sdd2() != 0) {
    _internal_set_sdd2(from._internal_sdd2());
  }
  if (from._internal_sdd3() != 0) {
    _internal_set_sdd3(from._internal_sdd3());
  }
  if (from._internal_sdd4() != 0) {
    _internal_set_sdd4(from._internal_sdd4());
  }
  if (from._internal_binning_x() != 0) {
    _internal_set_binning_x(from._internal_binning_x());
  }
  if (from._internal_binning_y() != 0) {
    _internal_set_binning_y(from._internal_binning_y());
  }
  if (from._internal_ccdheight() != 0) {
    _internal_set_ccdheight(from._internal_ccdheight());
  }
  if (from._internal_ccdwidth() != 0) {
    _internal_set_ccdwidth(from._internal_ccdwidth());
  }
  if (from._internal_pixelcount() != 0) {
    _internal_set_pixelcount(from._internal_pixelcount());
  }
  if (from._internal_frametransfer_mode() != 0) {
    _internal_set_frametransfer_mode(from._internal_frametransfer_mode());
  }
  if (from._internal_number_of_accumulations() != 0) {
    _internal_set_number_of_accumulations(from._internal_number_of_accumulations());
  }
  if (from._internal_number_of_scans() != 0) {
    _internal_set_number_of_scans(from._internal_number_of_scans());
  }
  if (!(from._internal_set_kinetic_cycle_time() <= 0 && from._internal_set_kinetic_cycle_time() >= 0)) {
    _internal_set_set_kinetic_cycle_time(from._internal_set_kinetic_cycle_time());
  }
  if (from._internal_read_mode() != 0) {
    _internal_set_read_mode(from._internal_read_mode());
  }
  if (from._internal_acquision_mode() != 0) {
    _internal_set_acquision_mode(from._internal_acquision_mode());
  }
  if (from._internal_shutter_mode() != 0) {
    _internal_set_shutter_mode(from._internal_shutter_mode());
  }
  if (from._internal_shutter_output_signal() != 0) {
    _internal_set_shutter_output_signal(from._internal_shutter_output_signal());
  }
  if (from._internal_shutter_open_time() != 0) {
    _internal_set_shutter_open_time(from._internal_shutter_open_time());
  }
  if (from._internal_shutter_close_time() != 0) {
    _internal_set_shutter_close_time(from._internal_shutter_close_time());
  }
  if (from._internal_triggermode() != 0) {
    _internal_set_triggermode(from._internal_triggermode());
  }
  if (!(from._internal_set_integration_time() <= 0 && from._internal_set_integration_time() >= 0)) {
    _internal_set_set_integration_time(from._internal_set_integration_time());
  }
  if (!(from._internal_exposure_time() <= 0 && from._internal_exposure_time() >= 0)) {
    _internal_set_exposure_time(from._internal_exposure_time());
  }
  if (!(from._internal_accumulation_time() <= 0 && from._internal_accumulation_time() >= 0)) {
    _internal_set_accumulation_time(from._internal_accumulation_time());
  }
  if (!(from._internal_kinetic_time() <= 0 && from._internal_kinetic_time() >= 0)) {
    _internal_set_kinetic_time(from._internal_kinetic_time());
  }
  if (from._internal_min_temp() != 0) {
    _internal_set_min_temp(from._internal_min_temp());
  }
  if (from._internal_max_temp() != 0) {
    _internal_set_max_temp(from._internal_max_temp());
  }
  if (from._internal_target_temp() != 0) {
    _internal_set_target_temp(from._internal_target_temp());
  }
  if (from._internal_pre_amp_gain() != 0) {
    _internal_set_pre_amp_gain(from._internal_pre_amp_gain());
  }
  if (from._internal_em_gain_mode() != 0) {
    _internal_set_em_gain_mode(from._internal_em_gain_mode());
  }
  if (from._internal_em_gain() != 0) {
    _internal_set_em_gain(from._internal_em_gain());
  }
  if (!(from._internal_sample_width() <= 0 && from._internal_sample_width() >= 0)) {
    _internal_set_sample_width(from._internal_sample_width());
  }
  if (!(from._internal_sample_height() <= 0 && from._internal_sample_height() >= 0)) {
    _internal_set_sample_height(from._internal_sample_height());
  }
  if (!(from._internal_sample_rotation_angle() <= 0 && from._internal_sample_rotation_angle() >= 0)) {
    _internal_set_sample_rotation_angle(from._internal_sample_rotation_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::InternalSwap(Measurement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  energies_.InternalSwap(&other->energies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scantype_, GetArenaForAllocation(),
      &other->scantype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &save_path_, GetArenaForAllocation(),
      &other->save_path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &save_file_, GetArenaForAllocation(),
      &other->save_file_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roidefinitions_, GetArenaForAllocation(),
      &other->roidefinitions_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scantitle_, GetArenaForAllocation(),
      &other->scantitle_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &datasinkip_, GetArenaForAllocation(),
      &other->datasinkip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sddip_, GetArenaForAllocation(),
      &other->sddip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ccdip_, GetArenaForAllocation(),
      &other->ccdip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sample_name_, GetArenaForAllocation(),
      &other->sample_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sample_type_, GetArenaForAllocation(),
      &other->sample_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sample_note_, GetArenaForAllocation(),
      &other->sample_note_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notes_, GetArenaForAllocation(),
      &other->notes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userdata_, GetArenaForAllocation(),
      &other->userdata_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Measurement, sample_rotation_angle_)
      + sizeof(Measurement::sample_rotation_angle_)
      - PROTOBUF_FIELD_OFFSET(Measurement, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Measurement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[0]);
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acquisition_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acquisition_time().empty()) {
    acquisition_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_acquisition_time(), 
      GetArenaForAllocation());
  }
  ::memcpy(&acquisition_number_, &from.acquisition_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_shutter_) -
    reinterpret_cast<char*>(&acquisition_number_)) + sizeof(vertical_shutter_));
  // @@protoc_insertion_point(copy_constructor:animax.Metadata)
}

inline void Metadata::SharedCtor() {
acquisition_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acquisition_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vertical_shutter_) -
    reinterpret_cast<char*>(&acquisition_number_)) + sizeof(vertical_shutter_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:animax.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  acquisition_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
}
void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acquisition_time_.ClearToEmpty();
  ::memset(&acquisition_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_shutter_) -
      reinterpret_cast<char*>(&acquisition_number_)) + sizeof(vertical_shutter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 acquisition_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          acquisition_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string acquisition_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_acquisition_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.Metadata.acquisition_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float set_energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          set_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float beamline_energy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          beamline_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ringcurrent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ringcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool horizontal_shutter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          horizontal_shutter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vertical_shutter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vertical_shutter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 acquisition_number = 1;
  if (this->_internal_acquisition_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_acquisition_number(), target);
  }

  // string acquisition_time = 2;
  if (!this->_internal_acquisition_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acquisition_time().data(), static_cast<int>(this->_internal_acquisition_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.Metadata.acquisition_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_acquisition_time(), target);
  }

  // float set_energy = 3;
  if (!(this->_internal_set_energy() <= 0 && this->_internal_set_energy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_set_energy(), target);
  }

  // float beamline_energy = 4;
  if (!(this->_internal_beamline_energy() <= 0 && this->_internal_beamline_energy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_beamline_energy(), target);
  }

  // float ringcurrent = 5;
  if (!(this->_internal_ringcurrent() <= 0 && this->_internal_ringcurrent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ringcurrent(), target);
  }

  // bool horizontal_shutter = 6;
  if (this->_internal_horizontal_shutter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_horizontal_shutter(), target);
  }

  // bool vertical_shutter = 7;
  if (this->_internal_vertical_shutter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_vertical_shutter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string acquisition_time = 2;
  if (!this->_internal_acquisition_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acquisition_time());
  }

  // int32 acquisition_number = 1;
  if (this->_internal_acquisition_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acquisition_number());
  }

  // float set_energy = 3;
  if (!(this->_internal_set_energy() <= 0 && this->_internal_set_energy() >= 0)) {
    total_size += 1 + 4;
  }

  // float beamline_energy = 4;
  if (!(this->_internal_beamline_energy() <= 0 && this->_internal_beamline_energy() >= 0)) {
    total_size += 1 + 4;
  }

  // float ringcurrent = 5;
  if (!(this->_internal_ringcurrent() <= 0 && this->_internal_ringcurrent() >= 0)) {
    total_size += 1 + 4;
  }

  // bool horizontal_shutter = 6;
  if (this->_internal_horizontal_shutter() != 0) {
    total_size += 1 + 1;
  }

  // bool vertical_shutter = 7;
  if (this->_internal_vertical_shutter() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }

void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Metadata *>(to)->MergeFrom(
      static_cast<const Metadata &>(from));
}


void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_acquisition_time().empty()) {
    _internal_set_acquisition_time(from._internal_acquisition_time());
  }
  if (from._internal_acquisition_number() != 0) {
    _internal_set_acquisition_number(from._internal_acquisition_number());
  }
  if (!(from._internal_set_energy() <= 0 && from._internal_set_energy() >= 0)) {
    _internal_set_set_energy(from._internal_set_energy());
  }
  if (!(from._internal_beamline_energy() <= 0 && from._internal_beamline_energy() >= 0)) {
    _internal_set_beamline_energy(from._internal_beamline_energy());
  }
  if (!(from._internal_ringcurrent() <= 0 && from._internal_ringcurrent() >= 0)) {
    _internal_set_ringcurrent(from._internal_ringcurrent());
  }
  if (from._internal_horizontal_shutter() != 0) {
    _internal_set_horizontal_shutter(from._internal_horizontal_shutter());
  }
  if (from._internal_vertical_shutter() != 0) {
    _internal_set_vertical_shutter(from._internal_vertical_shutter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &acquisition_time_, GetArenaForAllocation(),
      &other->acquisition_time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata, vertical_shutter_)
      + sizeof(Metadata::vertical_shutter_)
      - PROTOBUF_FIELD_OFFSET(Metadata, acquisition_number_)>(
          reinterpret_cast<char*>(&acquisition_number_),
          reinterpret_cast<char*>(&other->acquisition_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[1]);
}

// ===================================================================

class sdd::_Internal {
 public:
};

sdd::sdd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.sdd)
}
sdd::sdd(const sdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pixeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pixeldata().empty()) {
    pixeldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pixeldata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.sdd)
}

inline void sdd::SharedCtor() {
pixeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

sdd::~sdd() {
  // @@protoc_insertion_point(destructor:animax.sdd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void sdd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pixeldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sdd::ArenaDtor(void* object) {
  sdd* _this = reinterpret_cast< sdd* >(object);
  (void)_this;
}
void sdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sdd::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.sdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pixeldata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pixeldata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pixeldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.sdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pixeldata = 1;
  if (!this->_internal_pixeldata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pixeldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.sdd)
  return target;
}

size_t sdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.sdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pixeldata = 1;
  if (!this->_internal_pixeldata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pixeldata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sdd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    sdd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sdd::GetClassData() const { return &_class_data_; }

void sdd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<sdd *>(to)->MergeFrom(
      static_cast<const sdd &>(from));
}


void sdd::MergeFrom(const sdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.sdd)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pixeldata().empty()) {
    _internal_set_pixeldata(from._internal_pixeldata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sdd::CopyFrom(const sdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.sdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sdd::IsInitialized() const {
  return true;
}

void sdd::InternalSwap(sdd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pixeldata_, GetArenaForAllocation(),
      &other->pixeldata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata sdd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[2]);
}

// ===================================================================

class ccd::_Internal {
 public:
};

ccd::ccd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.ccd)
}
ccd::ccd(const ccd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pixeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pixeldata().empty()) {
    pixeldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pixeldata(), 
      GetArenaForAllocation());
  }
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:animax.ccd)
}

inline void ccd::SharedCtor() {
pixeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cnt_ = 0;
}

ccd::~ccd() {
  // @@protoc_insertion_point(destructor:animax.ccd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ccd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pixeldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ccd::ArenaDtor(void* object) {
  ccd* _this = reinterpret_cast< ccd* >(object);
  (void)_this;
}
void ccd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ccd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ccd::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.ccd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pixeldata_.ClearToEmpty();
  cnt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ccd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pixeldata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pixeldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ccd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.ccd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cnt = 1;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cnt(), target);
  }

  // bytes pixeldata = 2;
  if (!this->_internal_pixeldata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pixeldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.ccd)
  return target;
}

size_t ccd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.ccd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pixeldata = 2;
  if (!this->_internal_pixeldata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pixeldata());
  }

  // int32 cnt = 1;
  if (this->_internal_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ccd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ccd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ccd::GetClassData() const { return &_class_data_; }

void ccd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ccd *>(to)->MergeFrom(
      static_cast<const ccd &>(from));
}


void ccd::MergeFrom(const ccd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.ccd)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pixeldata().empty()) {
    _internal_set_pixeldata(from._internal_pixeldata());
  }
  if (from._internal_cnt() != 0) {
    _internal_set_cnt(from._internal_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ccd::CopyFrom(const ccd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.ccd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ccd::IsInitialized() const {
  return true;
}

void ccd::InternalSwap(ccd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pixeldata_, GetArenaForAllocation(),
      &other->pixeldata_, other->GetArenaForAllocation()
  );
  swap(cnt_, other->cnt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ccd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[3]);
}

// ===================================================================

class ccdsettings::_Internal {
 public:
};

ccdsettings::ccdsettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.ccdsettings)
}
ccdsettings::ccdsettings(const ccdsettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&binning_x_, &from.binning_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&em_gain_) -
    reinterpret_cast<char*>(&binning_x_)) + sizeof(em_gain_));
  // @@protoc_insertion_point(copy_constructor:animax.ccdsettings)
}

inline void ccdsettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&binning_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&em_gain_) -
    reinterpret_cast<char*>(&binning_x_)) + sizeof(em_gain_));
}

ccdsettings::~ccdsettings() {
  // @@protoc_insertion_point(destructor:animax.ccdsettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ccdsettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ccdsettings::ArenaDtor(void* object) {
  ccdsettings* _this = reinterpret_cast< ccdsettings* >(object);
  (void)_this;
}
void ccdsettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ccdsettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ccdsettings::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.ccdsettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&binning_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&em_gain_) -
      reinterpret_cast<char*>(&binning_x_)) + sizeof(em_gain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ccdsettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 binning_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          binning_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 binning_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          binning_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ccdheight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ccdheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ccdwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ccdwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pixelcount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pixelcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frametransfer_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          frametransfer_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_of_accumulations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_of_accumulations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_of_scans = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          number_of_scans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float set_kinetic_cycle_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          set_kinetic_cycle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 read_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          read_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 acquision_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          acquision_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shutter_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          shutter_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shutter_output_signal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          shutter_output_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float shutter_open_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          shutter_open_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float shutter_close_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          shutter_close_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 triggermode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          triggermode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float set_integration_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          set_integration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float exposure_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          exposure_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float accumulation_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          accumulation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kinetic_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          kinetic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 min_temp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          min_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_temp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          max_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_temp = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          target_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pre_amp_gain = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          pre_amp_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 em_gain_mode = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          em_gain_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 em_gain = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          em_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ccdsettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.ccdsettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 binning_x = 1;
  if (this->_internal_binning_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_binning_x(), target);
  }

  // int32 binning_y = 2;
  if (this->_internal_binning_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_binning_y(), target);
  }

  // int32 ccdheight = 3;
  if (this->_internal_ccdheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ccdheight(), target);
  }

  // int32 ccdwidth = 4;
  if (this->_internal_ccdwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ccdwidth(), target);
  }

  // int32 pixelcount = 5;
  if (this->_internal_pixelcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pixelcount(), target);
  }

  // int32 frametransfer_mode = 6;
  if (this->_internal_frametransfer_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_frametransfer_mode(), target);
  }

  // int32 number_of_accumulations = 7;
  if (this->_internal_number_of_accumulations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_number_of_accumulations(), target);
  }

  // int32 number_of_scans = 8;
  if (this->_internal_number_of_scans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_number_of_scans(), target);
  }

  // float set_kinetic_cycle_time = 9;
  if (!(this->_internal_set_kinetic_cycle_time() <= 0 && this->_internal_set_kinetic_cycle_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_set_kinetic_cycle_time(), target);
  }

  // int32 read_mode = 10;
  if (this->_internal_read_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_read_mode(), target);
  }

  // int32 acquision_mode = 11;
  if (this->_internal_acquision_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_acquision_mode(), target);
  }

  // int32 shutter_mode = 12;
  if (this->_internal_shutter_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_shutter_mode(), target);
  }

  // int32 shutter_output_signal = 13;
  if (this->_internal_shutter_output_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_shutter_output_signal(), target);
  }

  // float shutter_open_time = 14;
  if (!(this->_internal_shutter_open_time() <= 0 && this->_internal_shutter_open_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_shutter_open_time(), target);
  }

  // float shutter_close_time = 15;
  if (!(this->_internal_shutter_close_time() <= 0 && this->_internal_shutter_close_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_shutter_close_time(), target);
  }

  // int32 triggermode = 16;
  if (this->_internal_triggermode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_triggermode(), target);
  }

  // float set_integration_time = 17;
  if (!(this->_internal_set_integration_time() <= 0 && this->_internal_set_integration_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_set_integration_time(), target);
  }

  // float exposure_time = 18;
  if (!(this->_internal_exposure_time() <= 0 && this->_internal_exposure_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_exposure_time(), target);
  }

  // float accumulation_time = 19;
  if (!(this->_internal_accumulation_time() <= 0 && this->_internal_accumulation_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_accumulation_time(), target);
  }

  // float kinetic_time = 20;
  if (!(this->_internal_kinetic_time() <= 0 && this->_internal_kinetic_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_kinetic_time(), target);
  }

  // int32 min_temp = 21;
  if (this->_internal_min_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_min_temp(), target);
  }

  // int32 max_temp = 22;
  if (this->_internal_max_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_max_temp(), target);
  }

  // int32 target_temp = 23;
  if (this->_internal_target_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_target_temp(), target);
  }

  // int32 pre_amp_gain = 24;
  if (this->_internal_pre_amp_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_pre_amp_gain(), target);
  }

  // int32 em_gain_mode = 25;
  if (this->_internal_em_gain_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_em_gain_mode(), target);
  }

  // int32 em_gain = 26;
  if (this->_internal_em_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_em_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.ccdsettings)
  return target;
}

size_t ccdsettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.ccdsettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 binning_x = 1;
  if (this->_internal_binning_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_binning_x());
  }

  // int32 binning_y = 2;
  if (this->_internal_binning_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_binning_y());
  }

  // int32 ccdheight = 3;
  if (this->_internal_ccdheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ccdheight());
  }

  // int32 ccdwidth = 4;
  if (this->_internal_ccdwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ccdwidth());
  }

  // int32 pixelcount = 5;
  if (this->_internal_pixelcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pixelcount());
  }

  // int32 frametransfer_mode = 6;
  if (this->_internal_frametransfer_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frametransfer_mode());
  }

  // int32 number_of_accumulations = 7;
  if (this->_internal_number_of_accumulations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_accumulations());
  }

  // int32 number_of_scans = 8;
  if (this->_internal_number_of_scans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_scans());
  }

  // float set_kinetic_cycle_time = 9;
  if (!(this->_internal_set_kinetic_cycle_time() <= 0 && this->_internal_set_kinetic_cycle_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 read_mode = 10;
  if (this->_internal_read_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_read_mode());
  }

  // int32 acquision_mode = 11;
  if (this->_internal_acquision_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acquision_mode());
  }

  // int32 shutter_mode = 12;
  if (this->_internal_shutter_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shutter_mode());
  }

  // int32 shutter_output_signal = 13;
  if (this->_internal_shutter_output_signal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shutter_output_signal());
  }

  // float shutter_open_time = 14;
  if (!(this->_internal_shutter_open_time() <= 0 && this->_internal_shutter_open_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float shutter_close_time = 15;
  if (!(this->_internal_shutter_close_time() <= 0 && this->_internal_shutter_close_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 triggermode = 16;
  if (this->_internal_triggermode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_triggermode());
  }

  // float set_integration_time = 17;
  if (!(this->_internal_set_integration_time() <= 0 && this->_internal_set_integration_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float exposure_time = 18;
  if (!(this->_internal_exposure_time() <= 0 && this->_internal_exposure_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float accumulation_time = 19;
  if (!(this->_internal_accumulation_time() <= 0 && this->_internal_accumulation_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float kinetic_time = 20;
  if (!(this->_internal_kinetic_time() <= 0 && this->_internal_kinetic_time() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 min_temp = 21;
  if (this->_internal_min_temp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_temp());
  }

  // int32 max_temp = 22;
  if (this->_internal_max_temp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_temp());
  }

  // int32 target_temp = 23;
  if (this->_internal_target_temp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_temp());
  }

  // int32 pre_amp_gain = 24;
  if (this->_internal_pre_amp_gain() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pre_amp_gain());
  }

  // int32 em_gain_mode = 25;
  if (this->_internal_em_gain_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_em_gain_mode());
  }

  // int32 em_gain = 26;
  if (this->_internal_em_gain() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_em_gain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ccdsettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ccdsettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ccdsettings::GetClassData() const { return &_class_data_; }

void ccdsettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ccdsettings *>(to)->MergeFrom(
      static_cast<const ccdsettings &>(from));
}


void ccdsettings::MergeFrom(const ccdsettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.ccdsettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_binning_x() != 0) {
    _internal_set_binning_x(from._internal_binning_x());
  }
  if (from._internal_binning_y() != 0) {
    _internal_set_binning_y(from._internal_binning_y());
  }
  if (from._internal_ccdheight() != 0) {
    _internal_set_ccdheight(from._internal_ccdheight());
  }
  if (from._internal_ccdwidth() != 0) {
    _internal_set_ccdwidth(from._internal_ccdwidth());
  }
  if (from._internal_pixelcount() != 0) {
    _internal_set_pixelcount(from._internal_pixelcount());
  }
  if (from._internal_frametransfer_mode() != 0) {
    _internal_set_frametransfer_mode(from._internal_frametransfer_mode());
  }
  if (from._internal_number_of_accumulations() != 0) {
    _internal_set_number_of_accumulations(from._internal_number_of_accumulations());
  }
  if (from._internal_number_of_scans() != 0) {
    _internal_set_number_of_scans(from._internal_number_of_scans());
  }
  if (!(from._internal_set_kinetic_cycle_time() <= 0 && from._internal_set_kinetic_cycle_time() >= 0)) {
    _internal_set_set_kinetic_cycle_time(from._internal_set_kinetic_cycle_time());
  }
  if (from._internal_read_mode() != 0) {
    _internal_set_read_mode(from._internal_read_mode());
  }
  if (from._internal_acquision_mode() != 0) {
    _internal_set_acquision_mode(from._internal_acquision_mode());
  }
  if (from._internal_shutter_mode() != 0) {
    _internal_set_shutter_mode(from._internal_shutter_mode());
  }
  if (from._internal_shutter_output_signal() != 0) {
    _internal_set_shutter_output_signal(from._internal_shutter_output_signal());
  }
  if (!(from._internal_shutter_open_time() <= 0 && from._internal_shutter_open_time() >= 0)) {
    _internal_set_shutter_open_time(from._internal_shutter_open_time());
  }
  if (!(from._internal_shutter_close_time() <= 0 && from._internal_shutter_close_time() >= 0)) {
    _internal_set_shutter_close_time(from._internal_shutter_close_time());
  }
  if (from._internal_triggermode() != 0) {
    _internal_set_triggermode(from._internal_triggermode());
  }
  if (!(from._internal_set_integration_time() <= 0 && from._internal_set_integration_time() >= 0)) {
    _internal_set_set_integration_time(from._internal_set_integration_time());
  }
  if (!(from._internal_exposure_time() <= 0 && from._internal_exposure_time() >= 0)) {
    _internal_set_exposure_time(from._internal_exposure_time());
  }
  if (!(from._internal_accumulation_time() <= 0 && from._internal_accumulation_time() >= 0)) {
    _internal_set_accumulation_time(from._internal_accumulation_time());
  }
  if (!(from._internal_kinetic_time() <= 0 && from._internal_kinetic_time() >= 0)) {
    _internal_set_kinetic_time(from._internal_kinetic_time());
  }
  if (from._internal_min_temp() != 0) {
    _internal_set_min_temp(from._internal_min_temp());
  }
  if (from._internal_max_temp() != 0) {
    _internal_set_max_temp(from._internal_max_temp());
  }
  if (from._internal_target_temp() != 0) {
    _internal_set_target_temp(from._internal_target_temp());
  }
  if (from._internal_pre_amp_gain() != 0) {
    _internal_set_pre_amp_gain(from._internal_pre_amp_gain());
  }
  if (from._internal_em_gain_mode() != 0) {
    _internal_set_em_gain_mode(from._internal_em_gain_mode());
  }
  if (from._internal_em_gain() != 0) {
    _internal_set_em_gain(from._internal_em_gain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ccdsettings::CopyFrom(const ccdsettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.ccdsettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ccdsettings::IsInitialized() const {
  return true;
}

void ccdsettings::InternalSwap(ccdsettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ccdsettings, em_gain_)
      + sizeof(ccdsettings::em_gain_)
      - PROTOBUF_FIELD_OFFSET(ccdsettings, binning_x_)>(
          reinterpret_cast<char*>(&binning_x_),
          reinterpret_cast<char*>(&other->binning_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ccdsettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[4]);
}

// ===================================================================

class preview::_Internal {
 public:
};

preview::preview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.preview)
}
preview::preview(const preview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  previewdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previewdata().empty()) {
    previewdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previewdata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.preview)
}

inline void preview::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previewdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

preview::~preview() {
  // @@protoc_insertion_point(destructor:animax.preview)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void preview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previewdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void preview::ArenaDtor(void* object) {
  preview* _this = reinterpret_cast< preview* >(object);
  (void)_this;
}
void preview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void preview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void preview::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.preview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  previewdata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* preview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.preview.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previewdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_previewdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* preview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.preview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.preview.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes previewdata = 2;
  if (!this->_internal_previewdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_previewdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.preview)
  return target;
}

size_t preview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.preview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes previewdata = 2;
  if (!this->_internal_previewdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previewdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData preview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    preview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*preview::GetClassData() const { return &_class_data_; }

void preview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<preview *>(to)->MergeFrom(
      static_cast<const preview &>(from));
}


void preview::MergeFrom(const preview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.preview)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_previewdata().empty()) {
    _internal_set_previewdata(from._internal_previewdata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void preview::CopyFrom(const preview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool preview::IsInitialized() const {
  return true;
}

void preview::InternalSwap(preview* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previewdata_, GetArenaForAllocation(),
      &other->previewdata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata preview::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[5]);
}

// ===================================================================

class ROI::_Internal {
 public:
};

ROI::ROI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.ROI)
}
ROI::ROI(const ROI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  element_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_element().empty()) {
    element_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_element(), 
      GetArenaForAllocation());
  }
  line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line().empty()) {
    line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_line(), 
      GetArenaForAllocation());
  }
  roidata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roidata().empty()) {
    roidata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roidata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.ROI)
}

inline void ROI::SharedCtor() {
element_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
roidata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ROI::~ROI() {
  // @@protoc_insertion_point(destructor:animax.ROI)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ROI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  element_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roidata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ROI::ArenaDtor(void* object) {
  ROI* _this = reinterpret_cast< ROI* >(object);
  (void)_this;
}
void ROI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ROI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROI::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.ROI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.ClearToEmpty();
  line_.ClearToEmpty();
  roidata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_element();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.ROI.element"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.ROI.line"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes roidata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_roidata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.ROI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string element = 1;
  if (!this->_internal_element().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_element().data(), static_cast<int>(this->_internal_element().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.ROI.element");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element(), target);
  }

  // string line = 2;
  if (!this->_internal_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line().data(), static_cast<int>(this->_internal_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.ROI.line");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_line(), target);
  }

  // bytes roidata = 3;
  if (!this->_internal_roidata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_roidata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.ROI)
  return target;
}

size_t ROI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.ROI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string element = 1;
  if (!this->_internal_element().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_element());
  }

  // string line = 2;
  if (!this->_internal_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line());
  }

  // bytes roidata = 3;
  if (!this->_internal_roidata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_roidata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROI::GetClassData() const { return &_class_data_; }

void ROI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ROI *>(to)->MergeFrom(
      static_cast<const ROI &>(from));
}


void ROI::MergeFrom(const ROI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.ROI)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_element().empty()) {
    _internal_set_element(from._internal_element());
  }
  if (!from._internal_line().empty()) {
    _internal_set_line(from._internal_line());
  }
  if (!from._internal_roidata().empty()) {
    _internal_set_roidata(from._internal_roidata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROI::CopyFrom(const ROI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.ROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROI::IsInitialized() const {
  return true;
}

void ROI::InternalSwap(ROI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &element_, GetArenaForAllocation(),
      &other->element_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &line_, GetArenaForAllocation(),
      &other->line_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roidata_, GetArenaForAllocation(),
      &other->roidata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ROI::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[6]);
}

// ===================================================================

class scanstatus::_Internal {
 public:
};

scanstatus::scanstatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.scanstatus)
}
scanstatus::scanstatus(const scanstatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.scanstatus)
}

inline void scanstatus::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

scanstatus::~scanstatus() {
  // @@protoc_insertion_point(destructor:animax.scanstatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void scanstatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void scanstatus::ArenaDtor(void* object) {
  scanstatus* _this = reinterpret_cast< scanstatus* >(object);
  (void)_this;
}
void scanstatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scanstatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void scanstatus::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.scanstatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scanstatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.scanstatus.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scanstatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.scanstatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.scanstatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.scanstatus)
  return target;
}

size_t scanstatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.scanstatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData scanstatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    scanstatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*scanstatus::GetClassData() const { return &_class_data_; }

void scanstatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<scanstatus *>(to)->MergeFrom(
      static_cast<const scanstatus &>(from));
}


void scanstatus::MergeFrom(const scanstatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.scanstatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void scanstatus::CopyFrom(const scanstatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.scanstatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scanstatus::IsInitialized() const {
  return true;
}

void scanstatus::InternalSwap(scanstatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata scanstatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[7]);
}

// ===================================================================

class scannote::_Internal {
 public:
};

scannote::scannote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:animax.scannote)
}
scannote::scannote(const scannote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:animax.scannote)
}

inline void scannote::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

scannote::~scannote() {
  // @@protoc_insertion_point(destructor:animax.scannote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void scannote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void scannote::ArenaDtor(void* object) {
  scannote* _this = reinterpret_cast< scannote* >(object);
  (void)_this;
}
void scannote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scannote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void scannote::Clear() {
// @@protoc_insertion_point(message_clear_start:animax.scannote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scannote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "animax.scannote.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scannote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:animax.scannote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "animax.scannote.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:animax.scannote)
  return target;
}

size_t scannote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:animax.scannote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData scannote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    scannote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*scannote::GetClassData() const { return &_class_data_; }

void scannote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<scannote *>(to)->MergeFrom(
      static_cast<const scannote &>(from));
}


void scannote::MergeFrom(const scannote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:animax.scannote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void scannote::CopyFrom(const scannote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:animax.scannote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scannote::IsInitialized() const {
  return true;
}

void scannote::InternalSwap(scannote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, GetArenaForAllocation(),
      &other->text_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata scannote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_animax_2eproto_getter, &descriptor_table_animax_2eproto_once,
      file_level_metadata_animax_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace animax
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::animax::Measurement* Arena::CreateMaybeMessage< ::animax::Measurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::Measurement >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::Metadata* Arena::CreateMaybeMessage< ::animax::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::sdd* Arena::CreateMaybeMessage< ::animax::sdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::sdd >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::ccd* Arena::CreateMaybeMessage< ::animax::ccd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::ccd >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::ccdsettings* Arena::CreateMaybeMessage< ::animax::ccdsettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::ccdsettings >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::preview* Arena::CreateMaybeMessage< ::animax::preview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::preview >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::ROI* Arena::CreateMaybeMessage< ::animax::ROI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::ROI >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::scanstatus* Arena::CreateMaybeMessage< ::animax::scanstatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::scanstatus >(arena);
}
template<> PROTOBUF_NOINLINE ::animax::scannote* Arena::CreateMaybeMessage< ::animax::scannote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::animax::scannote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
