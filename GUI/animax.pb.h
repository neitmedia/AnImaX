// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animax.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_animax_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_animax_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_animax_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_animax_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_animax_2eproto;
namespace animax {
class Measurement;
struct MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class ROI;
struct ROIDefaultTypeInternal;
extern ROIDefaultTypeInternal _ROI_default_instance_;
class ccd;
struct ccdDefaultTypeInternal;
extern ccdDefaultTypeInternal _ccd_default_instance_;
class ccdsettings;
struct ccdsettingsDefaultTypeInternal;
extern ccdsettingsDefaultTypeInternal _ccdsettings_default_instance_;
class preview;
struct previewDefaultTypeInternal;
extern previewDefaultTypeInternal _preview_default_instance_;
class scanstatus;
struct scanstatusDefaultTypeInternal;
extern scanstatusDefaultTypeInternal _scanstatus_default_instance_;
class sdd;
struct sddDefaultTypeInternal;
extern sddDefaultTypeInternal _sdd_default_instance_;
}  // namespace animax
PROTOBUF_NAMESPACE_OPEN
template<> ::animax::Measurement* Arena::CreateMaybeMessage<::animax::Measurement>(Arena*);
template<> ::animax::Metadata* Arena::CreateMaybeMessage<::animax::Metadata>(Arena*);
template<> ::animax::ROI* Arena::CreateMaybeMessage<::animax::ROI>(Arena*);
template<> ::animax::ccd* Arena::CreateMaybeMessage<::animax::ccd>(Arena*);
template<> ::animax::ccdsettings* Arena::CreateMaybeMessage<::animax::ccdsettings>(Arena*);
template<> ::animax::preview* Arena::CreateMaybeMessage<::animax::preview>(Arena*);
template<> ::animax::scanstatus* Arena::CreateMaybeMessage<::animax::scanstatus>(Arena*);
template<> ::animax::sdd* Arena::CreateMaybeMessage<::animax::sdd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace animax {

// ===================================================================

class Measurement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:animax.Measurement) */ {
 public:
  inline Measurement() : Measurement(nullptr) {}
  ~Measurement() override;
  explicit constexpr Measurement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Measurement(const Measurement& from);
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Measurement& operator=(Measurement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Measurement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }
  inline void Swap(Measurement* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Measurement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Measurement* New() const final {
    return new Measurement();
  }

  Measurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Measurement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Measurement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Measurement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animax.Measurement";
  }
  protected:
  explicit Measurement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnergiesFieldNumber = 8,
    kScantypeFieldNumber = 4,
    kSavePathFieldNumber = 5,
    kSaveFileFieldNumber = 6,
    kDatasinkIPFieldNumber = 9,
    kSddIPFieldNumber = 11,
    kCcdIPFieldNumber = 13,
    kROIdefinitionsFieldNumber = 15,
    kSampleNameFieldNumber = 29,
    kSampleTypeFieldNumber = 30,
    kSampleNoteFieldNumber = 31,
    kNotesFieldNumber = 35,
    kUserdataFieldNumber = 36,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kAcquisitionTimeFieldNumber = 3,
    kEnergyCountFieldNumber = 7,
    kDatasinkPortFieldNumber = 10,
    kSddPortFieldNumber = 12,
    kCcdPortFieldNumber = 14,
    kSebitcountFieldNumber = 16,
    kFilterFieldNumber = 17,
    kEnergyrangeFieldNumber = 18,
    kTempmodeFieldNumber = 19,
    kZeropeakperiodFieldNumber = 20,
    kAcquisitionmodeFieldNumber = 21,
    kChecktemperatureFieldNumber = 22,
    kSdd1FieldNumber = 23,
    kSdd2FieldNumber = 24,
    kSdd3FieldNumber = 25,
    kSdd4FieldNumber = 26,
    kCcdheightFieldNumber = 27,
    kCcdwidthFieldNumber = 28,
    kSampleWidthFieldNumber = 32,
    kSampleHeightFieldNumber = 33,
    kSampleRotationAngleFieldNumber = 34,
  };
  // repeated int32 energies = 8;
  int energies_size() const;
  private:
  int _internal_energies_size() const;
  public:
  void clear_energies();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_energies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_energies() const;
  void _internal_add_energies(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_energies();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 energies(int index) const;
  void set_energies(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_energies(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      energies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_energies();

  // string scantype = 4;
  void clear_scantype();
  const std::string& scantype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scantype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scantype();
  PROTOBUF_MUST_USE_RESULT std::string* release_scantype();
  void set_allocated_scantype(std::string* scantype);
  private:
  const std::string& _internal_scantype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scantype(const std::string& value);
  std::string* _internal_mutable_scantype();
  public:

  // string save_path = 5;
  void clear_save_path();
  const std::string& save_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_save_path();
  void set_allocated_save_path(std::string* save_path);
  private:
  const std::string& _internal_save_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_path(const std::string& value);
  std::string* _internal_mutable_save_path();
  public:

  // string save_file = 6;
  void clear_save_file();
  const std::string& save_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_save_file();
  void set_allocated_save_file(std::string* save_file);
  private:
  const std::string& _internal_save_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_file(const std::string& value);
  std::string* _internal_mutable_save_file();
  public:

  // string datasinkIP = 9;
  void clear_datasinkip();
  const std::string& datasinkip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasinkip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasinkip();
  PROTOBUF_MUST_USE_RESULT std::string* release_datasinkip();
  void set_allocated_datasinkip(std::string* datasinkip);
  private:
  const std::string& _internal_datasinkip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasinkip(const std::string& value);
  std::string* _internal_mutable_datasinkip();
  public:

  // string sddIP = 11;
  void clear_sddip();
  const std::string& sddip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sddip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sddip();
  PROTOBUF_MUST_USE_RESULT std::string* release_sddip();
  void set_allocated_sddip(std::string* sddip);
  private:
  const std::string& _internal_sddip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sddip(const std::string& value);
  std::string* _internal_mutable_sddip();
  public:

  // string ccdIP = 13;
  void clear_ccdip();
  const std::string& ccdip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ccdip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ccdip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ccdip();
  void set_allocated_ccdip(std::string* ccdip);
  private:
  const std::string& _internal_ccdip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ccdip(const std::string& value);
  std::string* _internal_mutable_ccdip();
  public:

  // string ROIdefinitions = 15;
  void clear_roidefinitions();
  const std::string& roidefinitions() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roidefinitions(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roidefinitions();
  PROTOBUF_MUST_USE_RESULT std::string* release_roidefinitions();
  void set_allocated_roidefinitions(std::string* roidefinitions);
  private:
  const std::string& _internal_roidefinitions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roidefinitions(const std::string& value);
  std::string* _internal_mutable_roidefinitions();
  public:

  // string sample_name = 29;
  void clear_sample_name();
  const std::string& sample_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sample_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sample_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_sample_name();
  void set_allocated_sample_name(std::string* sample_name);
  private:
  const std::string& _internal_sample_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sample_name(const std::string& value);
  std::string* _internal_mutable_sample_name();
  public:

  // string sample_type = 30;
  void clear_sample_type();
  const std::string& sample_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sample_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sample_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_sample_type();
  void set_allocated_sample_type(std::string* sample_type);
  private:
  const std::string& _internal_sample_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sample_type(const std::string& value);
  std::string* _internal_mutable_sample_type();
  public:

  // string sample_note = 31;
  void clear_sample_note();
  const std::string& sample_note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sample_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sample_note();
  PROTOBUF_MUST_USE_RESULT std::string* release_sample_note();
  void set_allocated_sample_note(std::string* sample_note);
  private:
  const std::string& _internal_sample_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sample_note(const std::string& value);
  std::string* _internal_mutable_sample_note();
  public:

  // string notes = 35;
  void clear_notes();
  const std::string& notes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notes();
  PROTOBUF_MUST_USE_RESULT std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // string userdata = 36;
  void clear_userdata();
  const std::string& userdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userdata();
  PROTOBUF_MUST_USE_RESULT std::string* release_userdata();
  void set_allocated_userdata(std::string* userdata);
  private:
  const std::string& _internal_userdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userdata(const std::string& value);
  std::string* _internal_mutable_userdata();
  public:

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 acquisition_time = 3;
  void clear_acquisition_time();
  ::PROTOBUF_NAMESPACE_ID::int32 acquisition_time() const;
  void set_acquisition_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acquisition_time() const;
  void _internal_set_acquisition_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 energy_count = 7;
  void clear_energy_count();
  ::PROTOBUF_NAMESPACE_ID::int32 energy_count() const;
  void set_energy_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_energy_count() const;
  void _internal_set_energy_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 datasinkPort = 10;
  void clear_datasinkport();
  ::PROTOBUF_NAMESPACE_ID::int32 datasinkport() const;
  void set_datasinkport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datasinkport() const;
  void _internal_set_datasinkport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sddPort = 12;
  void clear_sddport();
  ::PROTOBUF_NAMESPACE_ID::int32 sddport() const;
  void set_sddport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sddport() const;
  void _internal_set_sddport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ccdPort = 14;
  void clear_ccdport();
  ::PROTOBUF_NAMESPACE_ID::int32 ccdport() const;
  void set_ccdport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ccdport() const;
  void _internal_set_ccdport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sebitcount = 16;
  void clear_sebitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 sebitcount() const;
  void set_sebitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sebitcount() const;
  void _internal_set_sebitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 filter = 17;
  void clear_filter();
  ::PROTOBUF_NAMESPACE_ID::int32 filter() const;
  void set_filter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter() const;
  void _internal_set_filter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 energyrange = 18;
  void clear_energyrange();
  ::PROTOBUF_NAMESPACE_ID::int32 energyrange() const;
  void set_energyrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_energyrange() const;
  void _internal_set_energyrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tempmode = 19;
  void clear_tempmode();
  ::PROTOBUF_NAMESPACE_ID::int32 tempmode() const;
  void set_tempmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tempmode() const;
  void _internal_set_tempmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 zeropeakperiod = 20;
  void clear_zeropeakperiod();
  ::PROTOBUF_NAMESPACE_ID::int32 zeropeakperiod() const;
  void set_zeropeakperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zeropeakperiod() const;
  void _internal_set_zeropeakperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 acquisitionmode = 21;
  void clear_acquisitionmode();
  ::PROTOBUF_NAMESPACE_ID::int32 acquisitionmode() const;
  void set_acquisitionmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acquisitionmode() const;
  void _internal_set_acquisitionmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 checktemperature = 22;
  void clear_checktemperature();
  ::PROTOBUF_NAMESPACE_ID::int32 checktemperature() const;
  void set_checktemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checktemperature() const;
  void _internal_set_checktemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool sdd1 = 23;
  void clear_sdd1();
  bool sdd1() const;
  void set_sdd1(bool value);
  private:
  bool _internal_sdd1() const;
  void _internal_set_sdd1(bool value);
  public:

  // bool sdd2 = 24;
  void clear_sdd2();
  bool sdd2() const;
  void set_sdd2(bool value);
  private:
  bool _internal_sdd2() const;
  void _internal_set_sdd2(bool value);
  public:

  // bool sdd3 = 25;
  void clear_sdd3();
  bool sdd3() const;
  void set_sdd3(bool value);
  private:
  bool _internal_sdd3() const;
  void _internal_set_sdd3(bool value);
  public:

  // bool sdd4 = 26;
  void clear_sdd4();
  bool sdd4() const;
  void set_sdd4(bool value);
  private:
  bool _internal_sdd4() const;
  void _internal_set_sdd4(bool value);
  public:

  // int32 ccdheight = 27;
  void clear_ccdheight();
  ::PROTOBUF_NAMESPACE_ID::int32 ccdheight() const;
  void set_ccdheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ccdheight() const;
  void _internal_set_ccdheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ccdwidth = 28;
  void clear_ccdwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 ccdwidth() const;
  void set_ccdwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ccdwidth() const;
  void _internal_set_ccdwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float sample_width = 32;
  void clear_sample_width();
  float sample_width() const;
  void set_sample_width(float value);
  private:
  float _internal_sample_width() const;
  void _internal_set_sample_width(float value);
  public:

  // float sample_height = 33;
  void clear_sample_height();
  float sample_height() const;
  void set_sample_height(float value);
  private:
  float _internal_sample_height() const;
  void _internal_set_sample_height(float value);
  public:

  // float sample_rotation_angle = 34;
  void clear_sample_rotation_angle();
  float sample_rotation_angle() const;
  void set_sample_rotation_angle(float value);
  private:
  float _internal_sample_rotation_angle() const;
  void _internal_set_sample_rotation_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:animax.Measurement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > energies_;
  mutable std::atomic<int> _energies_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scantype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasinkip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sddip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ccdip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roidefinitions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_note_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 acquisition_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 energy_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasinkport_;
  ::PROTOBUF_NAMESPACE_ID::int32 sddport_;
  ::PROTOBUF_NAMESPACE_ID::int32 ccdport_;
  ::PROTOBUF_NAMESPACE_ID::int32 sebitcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 energyrange_;
  ::PROTOBUF_NAMESPACE_ID::int32 tempmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 zeropeakperiod_;
  ::PROTOBUF_NAMESPACE_ID::int32 acquisitionmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 checktemperature_;
  bool sdd1_;
  bool sdd2_;
  bool sdd3_;
  bool sdd4_;
  ::PROTOBUF_NAMESPACE_ID::int32 ccdheight_;
  ::PROTOBUF_NAMESPACE_ID::int32 ccdwidth_;
  float sample_width_;
  float sample_height_;
  float sample_rotation_angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animax_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:animax.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit constexpr Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return new Metadata();
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animax.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcquisitionTimeFieldNumber = 2,
    kAcquisitionNumberFieldNumber = 1,
    kSetEnergyFieldNumber = 3,
    kBeamlineEnergyFieldNumber = 4,
    kRingcurrentFieldNumber = 5,
    kHorizontalShutterFieldNumber = 6,
    kVerticalShutterFieldNumber = 7,
  };
  // string acquisition_time = 2;
  void clear_acquisition_time();
  const std::string& acquisition_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acquisition_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acquisition_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_acquisition_time();
  void set_allocated_acquisition_time(std::string* acquisition_time);
  private:
  const std::string& _internal_acquisition_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acquisition_time(const std::string& value);
  std::string* _internal_mutable_acquisition_time();
  public:

  // int32 acquisition_number = 1;
  void clear_acquisition_number();
  ::PROTOBUF_NAMESPACE_ID::int32 acquisition_number() const;
  void set_acquisition_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acquisition_number() const;
  void _internal_set_acquisition_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float set_energy = 3;
  void clear_set_energy();
  float set_energy() const;
  void set_set_energy(float value);
  private:
  float _internal_set_energy() const;
  void _internal_set_set_energy(float value);
  public:

  // float beamline_energy = 4;
  void clear_beamline_energy();
  float beamline_energy() const;
  void set_beamline_energy(float value);
  private:
  float _internal_beamline_energy() const;
  void _internal_set_beamline_energy(float value);
  public:

  // float ringcurrent = 5;
  void clear_ringcurrent();
  float ringcurrent() const;
  void set_ringcurrent(float value);
  private:
  float _internal_ringcurrent() const;
  void _internal_set_ringcurrent(float value);
  public:

  // bool horizontal_shutter = 6;
  void clear_horizontal_shutter();
  bool horizontal_shutter() const;
  void set_horizontal_shutter(bool value);
  private:
  bool _internal_horizontal_shutter() const;
  void _internal_set_horizontal_shutter(bool value);
  public:

  // bool vertical_shutter = 7;
  void clear_vertical_shutter();
  bool vertical_shutter() const;
  void set_vertical_shutter(bool value);
  private:
  bool _internal_vertical_shutter() const;
  void _internal_set_vertical_shutter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:animax.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acquisition_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 acquisition_number_;
  float set_energy_;
  float beamline_energy_;
  float ringcurrent_;
  bool horizontal_shutter_;
  bool vertical_shutter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animax_2eproto;
};
// -------------------------------------------------------------------

class sdd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:animax.sdd) */ {
 public:
  inline sdd() : sdd(nullptr) {}
  ~sdd() override;
  explicit constexpr sdd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sdd(const sdd& from);
  sdd(sdd&& from) noexcept
    : sdd() {
    *this = ::std::move(from);
  }

  inline sdd& operator=(const sdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline sdd& operator=(sdd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sdd& default_instance() {
    return *internal_default_instance();
  }
  static inline const sdd* internal_default_instance() {
    return reinterpret_cast<const sdd*>(
               &_sdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(sdd& a, sdd& b) {
    a.Swap(&b);
  }
  inline void Swap(sdd* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sdd* New() const final {
    return new sdd();
  }

  sdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sdd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sdd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sdd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animax.sdd";
  }
  protected:
  explicit sdd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixeldataFieldNumber = 1,
  };
  // bytes pixeldata = 1;
  void clear_pixeldata();
  const std::string& pixeldata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pixeldata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pixeldata();
  PROTOBUF_MUST_USE_RESULT std::string* release_pixeldata();
  void set_allocated_pixeldata(std::string* pixeldata);
  private:
  const std::string& _internal_pixeldata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pixeldata(const std::string& value);
  std::string* _internal_mutable_pixeldata();
  public:

  // @@protoc_insertion_point(class_scope:animax.sdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixeldata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animax_2eproto;
};
// -------------------------------------------------------------------

class ccd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:animax.ccd) */ {
 public:
  inline ccd() : ccd(nullptr) {}
  ~ccd() override;
  explicit constexpr ccd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ccd(const ccd& from);
  ccd(ccd&& from) noexcept
    : ccd() {
    *this = ::std::move(from);
  }

  inline ccd& operator=(const ccd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ccd& operator=(ccd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ccd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ccd* internal_default_instance() {
    return reinterpret_cast<const ccd*>(
               &_ccd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ccd& a, ccd& b) {
    a.Swap(&b);
  }
  inline void Swap(ccd* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ccd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ccd* New() const final {
    return new ccd();
  }

  ccd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ccd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ccd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ccd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ccd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animax.ccd";
  }
  protected:
  explicit ccd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixeldataFieldNumber = 2,
    kCntFieldNumber = 1,
  };
  // bytes pixeldata = 2;
  void clear_pixeldata();
  const std::string& pixeldata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pixeldata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pixeldata();
  PROTOBUF_MUST_USE_RESULT std::string* release_pixeldata();
  void set_allocated_pixeldata(std::string* pixeldata);
  private:
  const std::string& _internal_pixeldata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pixeldata(const std::string& value);
  std::string* _internal_mutable_pixeldata();
  public:

  // int32 cnt = 1;
  void clear_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 cnt() const;
  void set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cnt() const;
  void _internal_set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:animax.ccd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixeldata_;
  ::PROTOBUF_NAMESPACE_ID::int32 cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animax_2eproto;
};
// -------------------------------------------------------------------

class ccdsettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:animax.ccdsettings) */ {
 public:
  inline ccdsettings() : ccdsettings(nullptr) {}
  ~ccdsettings() override;
  explicit constexpr ccdsettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ccdsettings(const ccdsettings& from);
  ccdsettings(ccdsettings&& from) noexcept
    : ccdsettings() {
    *this = ::std::move(from);
  }

  inline ccdsettings& operator=(const ccdsettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ccdsettings& operator=(ccdsettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ccdsettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ccdsettings* internal_default_instance() {
    return reinterpret_cast<const ccdsettings*>(
               &_ccdsettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ccdsettings& a, ccdsettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ccdsettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ccdsettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ccdsettings* New() const final {
    return new ccdsettings();
  }

  ccdsettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ccdsettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ccdsettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ccdsettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ccdsettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animax.ccdsettings";
  }
  protected:
  explicit ccdsettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:animax.ccdsettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animax_2eproto;
};
// -------------------------------------------------------------------

class preview final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:animax.preview) */ {
 public:
  inline preview() : preview(nullptr) {}
  ~preview() override;
  explicit constexpr preview(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  preview(const preview& from);
  preview(preview&& from) noexcept
    : preview() {
    *this = ::std::move(from);
  }

  inline preview& operator=(const preview& from) {
    CopyFrom(from);
    return *this;
  }
  inline preview& operator=(preview&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const preview& default_instance() {
    return *internal_default_instance();
  }
  static inline const preview* internal_default_instance() {
    return reinterpret_cast<const preview*>(
               &_preview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(preview& a, preview& b) {
    a.Swap(&b);
  }
  inline void Swap(preview* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(preview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline preview* New() const final {
    return new preview();
  }

  preview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<preview>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const preview& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const preview& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(preview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animax.preview";
  }
  protected:
  explicit preview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPreviewdataFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes previewdata = 2;
  void clear_previewdata();
  const std::string& previewdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previewdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previewdata();
  PROTOBUF_MUST_USE_RESULT std::string* release_previewdata();
  void set_allocated_previewdata(std::string* previewdata);
  private:
  const std::string& _internal_previewdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previewdata(const std::string& value);
  std::string* _internal_mutable_previewdata();
  public:

  // @@protoc_insertion_point(class_scope:animax.preview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previewdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animax_2eproto;
};
// -------------------------------------------------------------------

class ROI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:animax.ROI) */ {
 public:
  inline ROI() : ROI(nullptr) {}
  ~ROI() override;
  explicit constexpr ROI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ROI(const ROI& from);
  ROI(ROI&& from) noexcept
    : ROI() {
    *this = ::std::move(from);
  }

  inline ROI& operator=(const ROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROI& operator=(ROI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ROI& default_instance() {
    return *internal_default_instance();
  }
  static inline const ROI* internal_default_instance() {
    return reinterpret_cast<const ROI*>(
               &_ROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ROI& a, ROI& b) {
    a.Swap(&b);
  }
  inline void Swap(ROI* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROI* New() const final {
    return new ROI();
  }

  ROI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ROI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ROI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animax.ROI";
  }
  protected:
  explicit ROI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
    kLineFieldNumber = 2,
    kRoidataFieldNumber = 3,
  };
  // string element = 1;
  void clear_element();
  const std::string& element() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_element(ArgT0&& arg0, ArgT... args);
  std::string* mutable_element();
  PROTOBUF_MUST_USE_RESULT std::string* release_element();
  void set_allocated_element(std::string* element);
  private:
  const std::string& _internal_element() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_element(const std::string& value);
  std::string* _internal_mutable_element();
  public:

  // string line = 2;
  void clear_line();
  const std::string& line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line();
  PROTOBUF_MUST_USE_RESULT std::string* release_line();
  void set_allocated_line(std::string* line);
  private:
  const std::string& _internal_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line(const std::string& value);
  std::string* _internal_mutable_line();
  public:

  // bytes roidata = 3;
  void clear_roidata();
  const std::string& roidata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roidata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roidata();
  PROTOBUF_MUST_USE_RESULT std::string* release_roidata();
  void set_allocated_roidata(std::string* roidata);
  private:
  const std::string& _internal_roidata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roidata(const std::string& value);
  std::string* _internal_mutable_roidata();
  public:

  // @@protoc_insertion_point(class_scope:animax.ROI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr element_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roidata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animax_2eproto;
};
// -------------------------------------------------------------------

class scanstatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:animax.scanstatus) */ {
 public:
  inline scanstatus() : scanstatus(nullptr) {}
  ~scanstatus() override;
  explicit constexpr scanstatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  scanstatus(const scanstatus& from);
  scanstatus(scanstatus&& from) noexcept
    : scanstatus() {
    *this = ::std::move(from);
  }

  inline scanstatus& operator=(const scanstatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline scanstatus& operator=(scanstatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const scanstatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const scanstatus* internal_default_instance() {
    return reinterpret_cast<const scanstatus*>(
               &_scanstatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(scanstatus& a, scanstatus& b) {
    a.Swap(&b);
  }
  inline void Swap(scanstatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scanstatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scanstatus* New() const final {
    return new scanstatus();
  }

  scanstatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scanstatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const scanstatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const scanstatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scanstatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "animax.scanstatus";
  }
  protected:
  explicit scanstatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:animax.scanstatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_animax_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Measurement

// int32 width = 1;
inline void Measurement::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::width() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.width)
  return _internal_width();
}
inline void Measurement::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Measurement::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.width)
}

// int32 height = 2;
inline void Measurement::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::height() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.height)
  return _internal_height();
}
inline void Measurement::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Measurement::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.height)
}

// int32 acquisition_time = 3;
inline void Measurement::clear_acquisition_time() {
  acquisition_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_acquisition_time() const {
  return acquisition_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::acquisition_time() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.acquisition_time)
  return _internal_acquisition_time();
}
inline void Measurement::_internal_set_acquisition_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  acquisition_time_ = value;
}
inline void Measurement::set_acquisition_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acquisition_time(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.acquisition_time)
}

// string scantype = 4;
inline void Measurement::clear_scantype() {
  scantype_.ClearToEmpty();
}
inline const std::string& Measurement::scantype() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.scantype)
  return _internal_scantype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_scantype(ArgT0&& arg0, ArgT... args) {
 
 scantype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.scantype)
}
inline std::string* Measurement::mutable_scantype() {
  std::string* _s = _internal_mutable_scantype();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.scantype)
  return _s;
}
inline const std::string& Measurement::_internal_scantype() const {
  return scantype_.Get();
}
inline void Measurement::_internal_set_scantype(const std::string& value) {
  
  scantype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_scantype() {
  
  return scantype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_scantype() {
  // @@protoc_insertion_point(field_release:animax.Measurement.scantype)
  return scantype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_scantype(std::string* scantype) {
  if (scantype != nullptr) {
    
  } else {
    
  }
  scantype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scantype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.scantype)
}

// string save_path = 5;
inline void Measurement::clear_save_path() {
  save_path_.ClearToEmpty();
}
inline const std::string& Measurement::save_path() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.save_path)
  return _internal_save_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_save_path(ArgT0&& arg0, ArgT... args) {
 
 save_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.save_path)
}
inline std::string* Measurement::mutable_save_path() {
  std::string* _s = _internal_mutable_save_path();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.save_path)
  return _s;
}
inline const std::string& Measurement::_internal_save_path() const {
  return save_path_.Get();
}
inline void Measurement::_internal_set_save_path(const std::string& value) {
  
  save_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_save_path() {
  
  return save_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_save_path() {
  // @@protoc_insertion_point(field_release:animax.Measurement.save_path)
  return save_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_save_path(std::string* save_path) {
  if (save_path != nullptr) {
    
  } else {
    
  }
  save_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), save_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.save_path)
}

// string save_file = 6;
inline void Measurement::clear_save_file() {
  save_file_.ClearToEmpty();
}
inline const std::string& Measurement::save_file() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.save_file)
  return _internal_save_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_save_file(ArgT0&& arg0, ArgT... args) {
 
 save_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.save_file)
}
inline std::string* Measurement::mutable_save_file() {
  std::string* _s = _internal_mutable_save_file();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.save_file)
  return _s;
}
inline const std::string& Measurement::_internal_save_file() const {
  return save_file_.Get();
}
inline void Measurement::_internal_set_save_file(const std::string& value) {
  
  save_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_save_file() {
  
  return save_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_save_file() {
  // @@protoc_insertion_point(field_release:animax.Measurement.save_file)
  return save_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_save_file(std::string* save_file) {
  if (save_file != nullptr) {
    
  } else {
    
  }
  save_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), save_file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.save_file)
}

// int32 energy_count = 7;
inline void Measurement::clear_energy_count() {
  energy_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_energy_count() const {
  return energy_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::energy_count() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.energy_count)
  return _internal_energy_count();
}
inline void Measurement::_internal_set_energy_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  energy_count_ = value;
}
inline void Measurement::set_energy_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_energy_count(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.energy_count)
}

// repeated int32 energies = 8;
inline int Measurement::_internal_energies_size() const {
  return energies_.size();
}
inline int Measurement::energies_size() const {
  return _internal_energies_size();
}
inline void Measurement::clear_energies() {
  energies_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_energies(int index) const {
  return energies_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::energies(int index) const {
  // @@protoc_insertion_point(field_get:animax.Measurement.energies)
  return _internal_energies(index);
}
inline void Measurement::set_energies(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  energies_.Set(index, value);
  // @@protoc_insertion_point(field_set:animax.Measurement.energies)
}
inline void Measurement::_internal_add_energies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  energies_.Add(value);
}
inline void Measurement::add_energies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_energies(value);
  // @@protoc_insertion_point(field_add:animax.Measurement.energies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Measurement::_internal_energies() const {
  return energies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Measurement::energies() const {
  // @@protoc_insertion_point(field_list:animax.Measurement.energies)
  return _internal_energies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Measurement::_internal_mutable_energies() {
  return &energies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Measurement::mutable_energies() {
  // @@protoc_insertion_point(field_mutable_list:animax.Measurement.energies)
  return _internal_mutable_energies();
}

// string ROIdefinitions = 15;
inline void Measurement::clear_roidefinitions() {
  roidefinitions_.ClearToEmpty();
}
inline const std::string& Measurement::roidefinitions() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.ROIdefinitions)
  return _internal_roidefinitions();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_roidefinitions(ArgT0&& arg0, ArgT... args) {
 
 roidefinitions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.ROIdefinitions)
}
inline std::string* Measurement::mutable_roidefinitions() {
  std::string* _s = _internal_mutable_roidefinitions();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.ROIdefinitions)
  return _s;
}
inline const std::string& Measurement::_internal_roidefinitions() const {
  return roidefinitions_.Get();
}
inline void Measurement::_internal_set_roidefinitions(const std::string& value) {
  
  roidefinitions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_roidefinitions() {
  
  return roidefinitions_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_roidefinitions() {
  // @@protoc_insertion_point(field_release:animax.Measurement.ROIdefinitions)
  return roidefinitions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_roidefinitions(std::string* roidefinitions) {
  if (roidefinitions != nullptr) {
    
  } else {
    
  }
  roidefinitions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roidefinitions,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.ROIdefinitions)
}

// string datasinkIP = 9;
inline void Measurement::clear_datasinkip() {
  datasinkip_.ClearToEmpty();
}
inline const std::string& Measurement::datasinkip() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.datasinkIP)
  return _internal_datasinkip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_datasinkip(ArgT0&& arg0, ArgT... args) {
 
 datasinkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.datasinkIP)
}
inline std::string* Measurement::mutable_datasinkip() {
  std::string* _s = _internal_mutable_datasinkip();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.datasinkIP)
  return _s;
}
inline const std::string& Measurement::_internal_datasinkip() const {
  return datasinkip_.Get();
}
inline void Measurement::_internal_set_datasinkip(const std::string& value) {
  
  datasinkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_datasinkip() {
  
  return datasinkip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_datasinkip() {
  // @@protoc_insertion_point(field_release:animax.Measurement.datasinkIP)
  return datasinkip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_datasinkip(std::string* datasinkip) {
  if (datasinkip != nullptr) {
    
  } else {
    
  }
  datasinkip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasinkip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.datasinkIP)
}

// int32 datasinkPort = 10;
inline void Measurement::clear_datasinkport() {
  datasinkport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_datasinkport() const {
  return datasinkport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::datasinkport() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.datasinkPort)
  return _internal_datasinkport();
}
inline void Measurement::_internal_set_datasinkport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datasinkport_ = value;
}
inline void Measurement::set_datasinkport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datasinkport(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.datasinkPort)
}

// string sddIP = 11;
inline void Measurement::clear_sddip() {
  sddip_.ClearToEmpty();
}
inline const std::string& Measurement::sddip() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sddIP)
  return _internal_sddip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_sddip(ArgT0&& arg0, ArgT... args) {
 
 sddip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.sddIP)
}
inline std::string* Measurement::mutable_sddip() {
  std::string* _s = _internal_mutable_sddip();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.sddIP)
  return _s;
}
inline const std::string& Measurement::_internal_sddip() const {
  return sddip_.Get();
}
inline void Measurement::_internal_set_sddip(const std::string& value) {
  
  sddip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_sddip() {
  
  return sddip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_sddip() {
  // @@protoc_insertion_point(field_release:animax.Measurement.sddIP)
  return sddip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_sddip(std::string* sddip) {
  if (sddip != nullptr) {
    
  } else {
    
  }
  sddip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sddip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.sddIP)
}

// int32 sddPort = 12;
inline void Measurement::clear_sddport() {
  sddport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_sddport() const {
  return sddport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::sddport() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sddPort)
  return _internal_sddport();
}
inline void Measurement::_internal_set_sddport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sddport_ = value;
}
inline void Measurement::set_sddport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sddport(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sddPort)
}

// string ccdIP = 13;
inline void Measurement::clear_ccdip() {
  ccdip_.ClearToEmpty();
}
inline const std::string& Measurement::ccdip() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.ccdIP)
  return _internal_ccdip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_ccdip(ArgT0&& arg0, ArgT... args) {
 
 ccdip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.ccdIP)
}
inline std::string* Measurement::mutable_ccdip() {
  std::string* _s = _internal_mutable_ccdip();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.ccdIP)
  return _s;
}
inline const std::string& Measurement::_internal_ccdip() const {
  return ccdip_.Get();
}
inline void Measurement::_internal_set_ccdip(const std::string& value) {
  
  ccdip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_ccdip() {
  
  return ccdip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_ccdip() {
  // @@protoc_insertion_point(field_release:animax.Measurement.ccdIP)
  return ccdip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_ccdip(std::string* ccdip) {
  if (ccdip != nullptr) {
    
  } else {
    
  }
  ccdip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ccdip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.ccdIP)
}

// int32 ccdPort = 14;
inline void Measurement::clear_ccdport() {
  ccdport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_ccdport() const {
  return ccdport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::ccdport() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.ccdPort)
  return _internal_ccdport();
}
inline void Measurement::_internal_set_ccdport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ccdport_ = value;
}
inline void Measurement::set_ccdport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ccdport(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.ccdPort)
}

// int32 sebitcount = 16;
inline void Measurement::clear_sebitcount() {
  sebitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_sebitcount() const {
  return sebitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::sebitcount() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sebitcount)
  return _internal_sebitcount();
}
inline void Measurement::_internal_set_sebitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sebitcount_ = value;
}
inline void Measurement::set_sebitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sebitcount(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sebitcount)
}

// int32 filter = 17;
inline void Measurement::clear_filter() {
  filter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_filter() const {
  return filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::filter() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.filter)
  return _internal_filter();
}
inline void Measurement::_internal_set_filter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filter_ = value;
}
inline void Measurement::set_filter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.filter)
}

// int32 energyrange = 18;
inline void Measurement::clear_energyrange() {
  energyrange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_energyrange() const {
  return energyrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::energyrange() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.energyrange)
  return _internal_energyrange();
}
inline void Measurement::_internal_set_energyrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  energyrange_ = value;
}
inline void Measurement::set_energyrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_energyrange(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.energyrange)
}

// int32 tempmode = 19;
inline void Measurement::clear_tempmode() {
  tempmode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_tempmode() const {
  return tempmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::tempmode() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.tempmode)
  return _internal_tempmode();
}
inline void Measurement::_internal_set_tempmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tempmode_ = value;
}
inline void Measurement::set_tempmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tempmode(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.tempmode)
}

// int32 zeropeakperiod = 20;
inline void Measurement::clear_zeropeakperiod() {
  zeropeakperiod_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_zeropeakperiod() const {
  return zeropeakperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::zeropeakperiod() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.zeropeakperiod)
  return _internal_zeropeakperiod();
}
inline void Measurement::_internal_set_zeropeakperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zeropeakperiod_ = value;
}
inline void Measurement::set_zeropeakperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zeropeakperiod(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.zeropeakperiod)
}

// int32 acquisitionmode = 21;
inline void Measurement::clear_acquisitionmode() {
  acquisitionmode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_acquisitionmode() const {
  return acquisitionmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::acquisitionmode() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.acquisitionmode)
  return _internal_acquisitionmode();
}
inline void Measurement::_internal_set_acquisitionmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  acquisitionmode_ = value;
}
inline void Measurement::set_acquisitionmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acquisitionmode(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.acquisitionmode)
}

// int32 checktemperature = 22;
inline void Measurement::clear_checktemperature() {
  checktemperature_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_checktemperature() const {
  return checktemperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::checktemperature() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.checktemperature)
  return _internal_checktemperature();
}
inline void Measurement::_internal_set_checktemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  checktemperature_ = value;
}
inline void Measurement::set_checktemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checktemperature(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.checktemperature)
}

// bool sdd1 = 23;
inline void Measurement::clear_sdd1() {
  sdd1_ = false;
}
inline bool Measurement::_internal_sdd1() const {
  return sdd1_;
}
inline bool Measurement::sdd1() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sdd1)
  return _internal_sdd1();
}
inline void Measurement::_internal_set_sdd1(bool value) {
  
  sdd1_ = value;
}
inline void Measurement::set_sdd1(bool value) {
  _internal_set_sdd1(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sdd1)
}

// bool sdd2 = 24;
inline void Measurement::clear_sdd2() {
  sdd2_ = false;
}
inline bool Measurement::_internal_sdd2() const {
  return sdd2_;
}
inline bool Measurement::sdd2() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sdd2)
  return _internal_sdd2();
}
inline void Measurement::_internal_set_sdd2(bool value) {
  
  sdd2_ = value;
}
inline void Measurement::set_sdd2(bool value) {
  _internal_set_sdd2(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sdd2)
}

// bool sdd3 = 25;
inline void Measurement::clear_sdd3() {
  sdd3_ = false;
}
inline bool Measurement::_internal_sdd3() const {
  return sdd3_;
}
inline bool Measurement::sdd3() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sdd3)
  return _internal_sdd3();
}
inline void Measurement::_internal_set_sdd3(bool value) {
  
  sdd3_ = value;
}
inline void Measurement::set_sdd3(bool value) {
  _internal_set_sdd3(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sdd3)
}

// bool sdd4 = 26;
inline void Measurement::clear_sdd4() {
  sdd4_ = false;
}
inline bool Measurement::_internal_sdd4() const {
  return sdd4_;
}
inline bool Measurement::sdd4() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sdd4)
  return _internal_sdd4();
}
inline void Measurement::_internal_set_sdd4(bool value) {
  
  sdd4_ = value;
}
inline void Measurement::set_sdd4(bool value) {
  _internal_set_sdd4(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sdd4)
}

// int32 ccdheight = 27;
inline void Measurement::clear_ccdheight() {
  ccdheight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_ccdheight() const {
  return ccdheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::ccdheight() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.ccdheight)
  return _internal_ccdheight();
}
inline void Measurement::_internal_set_ccdheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ccdheight_ = value;
}
inline void Measurement::set_ccdheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ccdheight(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.ccdheight)
}

// int32 ccdwidth = 28;
inline void Measurement::clear_ccdwidth() {
  ccdwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::_internal_ccdwidth() const {
  return ccdwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement::ccdwidth() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.ccdwidth)
  return _internal_ccdwidth();
}
inline void Measurement::_internal_set_ccdwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ccdwidth_ = value;
}
inline void Measurement::set_ccdwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ccdwidth(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.ccdwidth)
}

// string sample_name = 29;
inline void Measurement::clear_sample_name() {
  sample_name_.ClearToEmpty();
}
inline const std::string& Measurement::sample_name() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sample_name)
  return _internal_sample_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_sample_name(ArgT0&& arg0, ArgT... args) {
 
 sample_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.sample_name)
}
inline std::string* Measurement::mutable_sample_name() {
  std::string* _s = _internal_mutable_sample_name();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.sample_name)
  return _s;
}
inline const std::string& Measurement::_internal_sample_name() const {
  return sample_name_.Get();
}
inline void Measurement::_internal_set_sample_name(const std::string& value) {
  
  sample_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_sample_name() {
  
  return sample_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_sample_name() {
  // @@protoc_insertion_point(field_release:animax.Measurement.sample_name)
  return sample_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_sample_name(std::string* sample_name) {
  if (sample_name != nullptr) {
    
  } else {
    
  }
  sample_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.sample_name)
}

// string sample_type = 30;
inline void Measurement::clear_sample_type() {
  sample_type_.ClearToEmpty();
}
inline const std::string& Measurement::sample_type() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sample_type)
  return _internal_sample_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_sample_type(ArgT0&& arg0, ArgT... args) {
 
 sample_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.sample_type)
}
inline std::string* Measurement::mutable_sample_type() {
  std::string* _s = _internal_mutable_sample_type();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.sample_type)
  return _s;
}
inline const std::string& Measurement::_internal_sample_type() const {
  return sample_type_.Get();
}
inline void Measurement::_internal_set_sample_type(const std::string& value) {
  
  sample_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_sample_type() {
  
  return sample_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_sample_type() {
  // @@protoc_insertion_point(field_release:animax.Measurement.sample_type)
  return sample_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_sample_type(std::string* sample_type) {
  if (sample_type != nullptr) {
    
  } else {
    
  }
  sample_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.sample_type)
}

// string sample_note = 31;
inline void Measurement::clear_sample_note() {
  sample_note_.ClearToEmpty();
}
inline const std::string& Measurement::sample_note() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sample_note)
  return _internal_sample_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_sample_note(ArgT0&& arg0, ArgT... args) {
 
 sample_note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.sample_note)
}
inline std::string* Measurement::mutable_sample_note() {
  std::string* _s = _internal_mutable_sample_note();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.sample_note)
  return _s;
}
inline const std::string& Measurement::_internal_sample_note() const {
  return sample_note_.Get();
}
inline void Measurement::_internal_set_sample_note(const std::string& value) {
  
  sample_note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_sample_note() {
  
  return sample_note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_sample_note() {
  // @@protoc_insertion_point(field_release:animax.Measurement.sample_note)
  return sample_note_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_sample_note(std::string* sample_note) {
  if (sample_note != nullptr) {
    
  } else {
    
  }
  sample_note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_note,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.sample_note)
}

// float sample_width = 32;
inline void Measurement::clear_sample_width() {
  sample_width_ = 0;
}
inline float Measurement::_internal_sample_width() const {
  return sample_width_;
}
inline float Measurement::sample_width() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sample_width)
  return _internal_sample_width();
}
inline void Measurement::_internal_set_sample_width(float value) {
  
  sample_width_ = value;
}
inline void Measurement::set_sample_width(float value) {
  _internal_set_sample_width(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sample_width)
}

// float sample_height = 33;
inline void Measurement::clear_sample_height() {
  sample_height_ = 0;
}
inline float Measurement::_internal_sample_height() const {
  return sample_height_;
}
inline float Measurement::sample_height() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sample_height)
  return _internal_sample_height();
}
inline void Measurement::_internal_set_sample_height(float value) {
  
  sample_height_ = value;
}
inline void Measurement::set_sample_height(float value) {
  _internal_set_sample_height(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sample_height)
}

// float sample_rotation_angle = 34;
inline void Measurement::clear_sample_rotation_angle() {
  sample_rotation_angle_ = 0;
}
inline float Measurement::_internal_sample_rotation_angle() const {
  return sample_rotation_angle_;
}
inline float Measurement::sample_rotation_angle() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.sample_rotation_angle)
  return _internal_sample_rotation_angle();
}
inline void Measurement::_internal_set_sample_rotation_angle(float value) {
  
  sample_rotation_angle_ = value;
}
inline void Measurement::set_sample_rotation_angle(float value) {
  _internal_set_sample_rotation_angle(value);
  // @@protoc_insertion_point(field_set:animax.Measurement.sample_rotation_angle)
}

// string notes = 35;
inline void Measurement::clear_notes() {
  notes_.ClearToEmpty();
}
inline const std::string& Measurement::notes() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.notes)
  return _internal_notes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_notes(ArgT0&& arg0, ArgT... args) {
 
 notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.notes)
}
inline std::string* Measurement::mutable_notes() {
  std::string* _s = _internal_mutable_notes();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.notes)
  return _s;
}
inline const std::string& Measurement::_internal_notes() const {
  return notes_.Get();
}
inline void Measurement::_internal_set_notes(const std::string& value) {
  
  notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_notes() {
  
  return notes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_notes() {
  // @@protoc_insertion_point(field_release:animax.Measurement.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.notes)
}

// string userdata = 36;
inline void Measurement::clear_userdata() {
  userdata_.ClearToEmpty();
}
inline const std::string& Measurement::userdata() const {
  // @@protoc_insertion_point(field_get:animax.Measurement.userdata)
  return _internal_userdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Measurement::set_userdata(ArgT0&& arg0, ArgT... args) {
 
 userdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Measurement.userdata)
}
inline std::string* Measurement::mutable_userdata() {
  std::string* _s = _internal_mutable_userdata();
  // @@protoc_insertion_point(field_mutable:animax.Measurement.userdata)
  return _s;
}
inline const std::string& Measurement::_internal_userdata() const {
  return userdata_.Get();
}
inline void Measurement::_internal_set_userdata(const std::string& value) {
  
  userdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Measurement::_internal_mutable_userdata() {
  
  return userdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Measurement::release_userdata() {
  // @@protoc_insertion_point(field_release:animax.Measurement.userdata)
  return userdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Measurement::set_allocated_userdata(std::string* userdata) {
  if (userdata != nullptr) {
    
  } else {
    
  }
  userdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userdata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Measurement.userdata)
}

// -------------------------------------------------------------------

// Metadata

// int32 acquisition_number = 1;
inline void Metadata::clear_acquisition_number() {
  acquisition_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metadata::_internal_acquisition_number() const {
  return acquisition_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metadata::acquisition_number() const {
  // @@protoc_insertion_point(field_get:animax.Metadata.acquisition_number)
  return _internal_acquisition_number();
}
inline void Metadata::_internal_set_acquisition_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  acquisition_number_ = value;
}
inline void Metadata::set_acquisition_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acquisition_number(value);
  // @@protoc_insertion_point(field_set:animax.Metadata.acquisition_number)
}

// string acquisition_time = 2;
inline void Metadata::clear_acquisition_time() {
  acquisition_time_.ClearToEmpty();
}
inline const std::string& Metadata::acquisition_time() const {
  // @@protoc_insertion_point(field_get:animax.Metadata.acquisition_time)
  return _internal_acquisition_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_acquisition_time(ArgT0&& arg0, ArgT... args) {
 
 acquisition_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.Metadata.acquisition_time)
}
inline std::string* Metadata::mutable_acquisition_time() {
  std::string* _s = _internal_mutable_acquisition_time();
  // @@protoc_insertion_point(field_mutable:animax.Metadata.acquisition_time)
  return _s;
}
inline const std::string& Metadata::_internal_acquisition_time() const {
  return acquisition_time_.Get();
}
inline void Metadata::_internal_set_acquisition_time(const std::string& value) {
  
  acquisition_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_acquisition_time() {
  
  return acquisition_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_acquisition_time() {
  // @@protoc_insertion_point(field_release:animax.Metadata.acquisition_time)
  return acquisition_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_acquisition_time(std::string* acquisition_time) {
  if (acquisition_time != nullptr) {
    
  } else {
    
  }
  acquisition_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acquisition_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.Metadata.acquisition_time)
}

// float set_energy = 3;
inline void Metadata::clear_set_energy() {
  set_energy_ = 0;
}
inline float Metadata::_internal_set_energy() const {
  return set_energy_;
}
inline float Metadata::set_energy() const {
  // @@protoc_insertion_point(field_get:animax.Metadata.set_energy)
  return _internal_set_energy();
}
inline void Metadata::_internal_set_set_energy(float value) {
  
  set_energy_ = value;
}
inline void Metadata::set_set_energy(float value) {
  _internal_set_set_energy(value);
  // @@protoc_insertion_point(field_set:animax.Metadata.set_energy)
}

// float beamline_energy = 4;
inline void Metadata::clear_beamline_energy() {
  beamline_energy_ = 0;
}
inline float Metadata::_internal_beamline_energy() const {
  return beamline_energy_;
}
inline float Metadata::beamline_energy() const {
  // @@protoc_insertion_point(field_get:animax.Metadata.beamline_energy)
  return _internal_beamline_energy();
}
inline void Metadata::_internal_set_beamline_energy(float value) {
  
  beamline_energy_ = value;
}
inline void Metadata::set_beamline_energy(float value) {
  _internal_set_beamline_energy(value);
  // @@protoc_insertion_point(field_set:animax.Metadata.beamline_energy)
}

// float ringcurrent = 5;
inline void Metadata::clear_ringcurrent() {
  ringcurrent_ = 0;
}
inline float Metadata::_internal_ringcurrent() const {
  return ringcurrent_;
}
inline float Metadata::ringcurrent() const {
  // @@protoc_insertion_point(field_get:animax.Metadata.ringcurrent)
  return _internal_ringcurrent();
}
inline void Metadata::_internal_set_ringcurrent(float value) {
  
  ringcurrent_ = value;
}
inline void Metadata::set_ringcurrent(float value) {
  _internal_set_ringcurrent(value);
  // @@protoc_insertion_point(field_set:animax.Metadata.ringcurrent)
}

// bool horizontal_shutter = 6;
inline void Metadata::clear_horizontal_shutter() {
  horizontal_shutter_ = false;
}
inline bool Metadata::_internal_horizontal_shutter() const {
  return horizontal_shutter_;
}
inline bool Metadata::horizontal_shutter() const {
  // @@protoc_insertion_point(field_get:animax.Metadata.horizontal_shutter)
  return _internal_horizontal_shutter();
}
inline void Metadata::_internal_set_horizontal_shutter(bool value) {
  
  horizontal_shutter_ = value;
}
inline void Metadata::set_horizontal_shutter(bool value) {
  _internal_set_horizontal_shutter(value);
  // @@protoc_insertion_point(field_set:animax.Metadata.horizontal_shutter)
}

// bool vertical_shutter = 7;
inline void Metadata::clear_vertical_shutter() {
  vertical_shutter_ = false;
}
inline bool Metadata::_internal_vertical_shutter() const {
  return vertical_shutter_;
}
inline bool Metadata::vertical_shutter() const {
  // @@protoc_insertion_point(field_get:animax.Metadata.vertical_shutter)
  return _internal_vertical_shutter();
}
inline void Metadata::_internal_set_vertical_shutter(bool value) {
  
  vertical_shutter_ = value;
}
inline void Metadata::set_vertical_shutter(bool value) {
  _internal_set_vertical_shutter(value);
  // @@protoc_insertion_point(field_set:animax.Metadata.vertical_shutter)
}

// -------------------------------------------------------------------

// sdd

// bytes pixeldata = 1;
inline void sdd::clear_pixeldata() {
  pixeldata_.ClearToEmpty();
}
inline const std::string& sdd::pixeldata() const {
  // @@protoc_insertion_point(field_get:animax.sdd.pixeldata)
  return _internal_pixeldata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sdd::set_pixeldata(ArgT0&& arg0, ArgT... args) {
 
 pixeldata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.sdd.pixeldata)
}
inline std::string* sdd::mutable_pixeldata() {
  std::string* _s = _internal_mutable_pixeldata();
  // @@protoc_insertion_point(field_mutable:animax.sdd.pixeldata)
  return _s;
}
inline const std::string& sdd::_internal_pixeldata() const {
  return pixeldata_.Get();
}
inline void sdd::_internal_set_pixeldata(const std::string& value) {
  
  pixeldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sdd::_internal_mutable_pixeldata() {
  
  return pixeldata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sdd::release_pixeldata() {
  // @@protoc_insertion_point(field_release:animax.sdd.pixeldata)
  return pixeldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sdd::set_allocated_pixeldata(std::string* pixeldata) {
  if (pixeldata != nullptr) {
    
  } else {
    
  }
  pixeldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixeldata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.sdd.pixeldata)
}

// -------------------------------------------------------------------

// ccd

// int32 cnt = 1;
inline void ccd::clear_cnt() {
  cnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ccd::_internal_cnt() const {
  return cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ccd::cnt() const {
  // @@protoc_insertion_point(field_get:animax.ccd.cnt)
  return _internal_cnt();
}
inline void ccd::_internal_set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cnt_ = value;
}
inline void ccd::set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cnt(value);
  // @@protoc_insertion_point(field_set:animax.ccd.cnt)
}

// bytes pixeldata = 2;
inline void ccd::clear_pixeldata() {
  pixeldata_.ClearToEmpty();
}
inline const std::string& ccd::pixeldata() const {
  // @@protoc_insertion_point(field_get:animax.ccd.pixeldata)
  return _internal_pixeldata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ccd::set_pixeldata(ArgT0&& arg0, ArgT... args) {
 
 pixeldata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.ccd.pixeldata)
}
inline std::string* ccd::mutable_pixeldata() {
  std::string* _s = _internal_mutable_pixeldata();
  // @@protoc_insertion_point(field_mutable:animax.ccd.pixeldata)
  return _s;
}
inline const std::string& ccd::_internal_pixeldata() const {
  return pixeldata_.Get();
}
inline void ccd::_internal_set_pixeldata(const std::string& value) {
  
  pixeldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ccd::_internal_mutable_pixeldata() {
  
  return pixeldata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ccd::release_pixeldata() {
  // @@protoc_insertion_point(field_release:animax.ccd.pixeldata)
  return pixeldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ccd::set_allocated_pixeldata(std::string* pixeldata) {
  if (pixeldata != nullptr) {
    
  } else {
    
  }
  pixeldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixeldata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.ccd.pixeldata)
}

// -------------------------------------------------------------------

// ccdsettings

// int32 width = 1;
inline void ccdsettings::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ccdsettings::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ccdsettings::width() const {
  // @@protoc_insertion_point(field_get:animax.ccdsettings.width)
  return _internal_width();
}
inline void ccdsettings::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ccdsettings::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:animax.ccdsettings.width)
}

// int32 height = 2;
inline void ccdsettings::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ccdsettings::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ccdsettings::height() const {
  // @@protoc_insertion_point(field_get:animax.ccdsettings.height)
  return _internal_height();
}
inline void ccdsettings::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ccdsettings::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:animax.ccdsettings.height)
}

// -------------------------------------------------------------------

// preview

// string type = 1;
inline void preview::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& preview::type() const {
  // @@protoc_insertion_point(field_get:animax.preview.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void preview::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.preview.type)
}
inline std::string* preview::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:animax.preview.type)
  return _s;
}
inline const std::string& preview::_internal_type() const {
  return type_.Get();
}
inline void preview::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* preview::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* preview::release_type() {
  // @@protoc_insertion_point(field_release:animax.preview.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void preview::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.preview.type)
}

// bytes previewdata = 2;
inline void preview::clear_previewdata() {
  previewdata_.ClearToEmpty();
}
inline const std::string& preview::previewdata() const {
  // @@protoc_insertion_point(field_get:animax.preview.previewdata)
  return _internal_previewdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void preview::set_previewdata(ArgT0&& arg0, ArgT... args) {
 
 previewdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.preview.previewdata)
}
inline std::string* preview::mutable_previewdata() {
  std::string* _s = _internal_mutable_previewdata();
  // @@protoc_insertion_point(field_mutable:animax.preview.previewdata)
  return _s;
}
inline const std::string& preview::_internal_previewdata() const {
  return previewdata_.Get();
}
inline void preview::_internal_set_previewdata(const std::string& value) {
  
  previewdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* preview::_internal_mutable_previewdata() {
  
  return previewdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* preview::release_previewdata() {
  // @@protoc_insertion_point(field_release:animax.preview.previewdata)
  return previewdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void preview::set_allocated_previewdata(std::string* previewdata) {
  if (previewdata != nullptr) {
    
  } else {
    
  }
  previewdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previewdata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.preview.previewdata)
}

// -------------------------------------------------------------------

// ROI

// string element = 1;
inline void ROI::clear_element() {
  element_.ClearToEmpty();
}
inline const std::string& ROI::element() const {
  // @@protoc_insertion_point(field_get:animax.ROI.element)
  return _internal_element();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ROI::set_element(ArgT0&& arg0, ArgT... args) {
 
 element_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.ROI.element)
}
inline std::string* ROI::mutable_element() {
  std::string* _s = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:animax.ROI.element)
  return _s;
}
inline const std::string& ROI::_internal_element() const {
  return element_.Get();
}
inline void ROI::_internal_set_element(const std::string& value) {
  
  element_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ROI::_internal_mutable_element() {
  
  return element_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ROI::release_element() {
  // @@protoc_insertion_point(field_release:animax.ROI.element)
  return element_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ROI::set_allocated_element(std::string* element) {
  if (element != nullptr) {
    
  } else {
    
  }
  element_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), element,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.ROI.element)
}

// string line = 2;
inline void ROI::clear_line() {
  line_.ClearToEmpty();
}
inline const std::string& ROI::line() const {
  // @@protoc_insertion_point(field_get:animax.ROI.line)
  return _internal_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ROI::set_line(ArgT0&& arg0, ArgT... args) {
 
 line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.ROI.line)
}
inline std::string* ROI::mutable_line() {
  std::string* _s = _internal_mutable_line();
  // @@protoc_insertion_point(field_mutable:animax.ROI.line)
  return _s;
}
inline const std::string& ROI::_internal_line() const {
  return line_.Get();
}
inline void ROI::_internal_set_line(const std::string& value) {
  
  line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ROI::_internal_mutable_line() {
  
  return line_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ROI::release_line() {
  // @@protoc_insertion_point(field_release:animax.ROI.line)
  return line_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ROI::set_allocated_line(std::string* line) {
  if (line != nullptr) {
    
  } else {
    
  }
  line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.ROI.line)
}

// bytes roidata = 3;
inline void ROI::clear_roidata() {
  roidata_.ClearToEmpty();
}
inline const std::string& ROI::roidata() const {
  // @@protoc_insertion_point(field_get:animax.ROI.roidata)
  return _internal_roidata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ROI::set_roidata(ArgT0&& arg0, ArgT... args) {
 
 roidata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.ROI.roidata)
}
inline std::string* ROI::mutable_roidata() {
  std::string* _s = _internal_mutable_roidata();
  // @@protoc_insertion_point(field_mutable:animax.ROI.roidata)
  return _s;
}
inline const std::string& ROI::_internal_roidata() const {
  return roidata_.Get();
}
inline void ROI::_internal_set_roidata(const std::string& value) {
  
  roidata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ROI::_internal_mutable_roidata() {
  
  return roidata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ROI::release_roidata() {
  // @@protoc_insertion_point(field_release:animax.ROI.roidata)
  return roidata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ROI::set_allocated_roidata(std::string* roidata) {
  if (roidata != nullptr) {
    
  } else {
    
  }
  roidata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roidata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.ROI.roidata)
}

// -------------------------------------------------------------------

// scanstatus

// string status = 1;
inline void scanstatus::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& scanstatus::status() const {
  // @@protoc_insertion_point(field_get:animax.scanstatus.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void scanstatus::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:animax.scanstatus.status)
}
inline std::string* scanstatus::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:animax.scanstatus.status)
  return _s;
}
inline const std::string& scanstatus::_internal_status() const {
  return status_.Get();
}
inline void scanstatus::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* scanstatus::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* scanstatus::release_status() {
  // @@protoc_insertion_point(field_release:animax.scanstatus.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void scanstatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:animax.scanstatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace animax

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_animax_2eproto
